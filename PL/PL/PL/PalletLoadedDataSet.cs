//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace Beitler.Data
{


    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PalletLoaderDataSet")]

    public partial class PalletLoaderDataSet : global::System.Data.DataSet
    {

        private ScannedPalletConfirmDataTable tableScannedPalletConfirm;

        private ScannedPalletLoadDataTable tableScannedPalletLoad;

        private vwPalletLoaderDispatchOpenDataTable tablevwPalletLoaderDispatchOpen;

        private MobileUserDataTable tableMobileUser;

        private MobileErrorDataTable tableMobileError;

        private ClientBarcodeTypeDataTable tableClientBarcodeType;

        private ClientBarcodeTypeSpecDataTable tableClientBarcodeTypeSpec;

        private global::System.Data.DataRelation relationFK_ScannedPalletLoad_ScannedPalletConfirm;

        private global::System.Data.DataRelation relationFK_ClientBarcodeTypeSpec_ClientBarcodeType;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PalletLoaderDataSet()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }



        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public ScannedPalletConfirmDataTable ScannedPalletConfirm
        {
            get
            {
                return this.tableScannedPalletConfirm;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public ScannedPalletLoadDataTable ScannedPalletLoad
        {
            get
            {
                return this.tableScannedPalletLoad;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public vwPalletLoaderDispatchOpenDataTable vwPalletLoaderDispatchOpen
        {
            get
            {
                return this.tablevwPalletLoaderDispatchOpen;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public MobileUserDataTable MobileUser
        {
            get
            {
                return this.tableMobileUser;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public MobileErrorDataTable MobileError
        {
            get
            {
                return this.tableMobileError;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public ClientBarcodeTypeDataTable ClientBarcodeType
        {
            get
            {
                return this.tableClientBarcodeType;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public ClientBarcodeTypeSpecDataTable ClientBarcodeTypeSpec
        {
            get
            {
                return this.tableClientBarcodeTypeSpec;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]


        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            PalletLoaderDataSet cln = ((PalletLoaderDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ScannedPalletConfirm"] != null))
                {
                    base.Tables.Add(new ScannedPalletConfirmDataTable(ds.Tables["ScannedPalletConfirm"]));
                }
                if ((ds.Tables["ScannedPalletLoad"] != null))
                {
                    base.Tables.Add(new ScannedPalletLoadDataTable(ds.Tables["ScannedPalletLoad"]));
                }
                if ((ds.Tables["vwPalletLoaderDispatchOpen"] != null))
                {
                    base.Tables.Add(new vwPalletLoaderDispatchOpenDataTable(ds.Tables["vwPalletLoaderDispatchOpen"]));
                }
                if ((ds.Tables["MobileUser"] != null))
                {
                    base.Tables.Add(new MobileUserDataTable(ds.Tables["MobileUser"]));
                }
                if ((ds.Tables["MobileError"] != null))
                {
                    base.Tables.Add(new MobileErrorDataTable(ds.Tables["MobileError"]));
                }
                if ((ds.Tables["ClientBarcodeType"] != null))
                {
                    base.Tables.Add(new ClientBarcodeTypeDataTable(ds.Tables["ClientBarcodeType"]));
                }
                if ((ds.Tables["ClientBarcodeTypeSpec"] != null))
                {
                    base.Tables.Add(new ClientBarcodeTypeSpecDataTable(ds.Tables["ClientBarcodeTypeSpec"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableScannedPalletConfirm = ((ScannedPalletConfirmDataTable)(base.Tables["ScannedPalletConfirm"]));
            if ((initTable == true))
            {
                if ((this.tableScannedPalletConfirm != null))
                {
                    this.tableScannedPalletConfirm.InitVars();
                }
            }
            this.tableScannedPalletLoad = ((ScannedPalletLoadDataTable)(base.Tables["ScannedPalletLoad"]));
            if ((initTable == true))
            {
                if ((this.tableScannedPalletLoad != null))
                {
                    this.tableScannedPalletLoad.InitVars();
                }
            }
            this.tablevwPalletLoaderDispatchOpen = ((vwPalletLoaderDispatchOpenDataTable)(base.Tables["vwPalletLoaderDispatchOpen"]));
            if ((initTable == true))
            {
                if ((this.tablevwPalletLoaderDispatchOpen != null))
                {
                    this.tablevwPalletLoaderDispatchOpen.InitVars();
                }
            }
            this.tableMobileUser = ((MobileUserDataTable)(base.Tables["MobileUser"]));
            if ((initTable == true))
            {
                if ((this.tableMobileUser != null))
                {
                    this.tableMobileUser.InitVars();
                }
            }
            this.tableMobileError = ((MobileErrorDataTable)(base.Tables["MobileError"]));
            if ((initTable == true))
            {
                if ((this.tableMobileError != null))
                {
                    this.tableMobileError.InitVars();
                }
            }
            this.tableClientBarcodeType = ((ClientBarcodeTypeDataTable)(base.Tables["ClientBarcodeType"]));
            if ((initTable == true))
            {
                if ((this.tableClientBarcodeType != null))
                {
                    this.tableClientBarcodeType.InitVars();
                }
            }
            this.tableClientBarcodeTypeSpec = ((ClientBarcodeTypeSpecDataTable)(base.Tables["ClientBarcodeTypeSpec"]));
            if ((initTable == true))
            {
                if ((this.tableClientBarcodeTypeSpec != null))
                {
                    this.tableClientBarcodeTypeSpec.InitVars();
                }
            }
            this.relationFK_ScannedPalletLoad_ScannedPalletConfirm = this.Relations["FK_ScannedPalletLoad_ScannedPalletConfirm"];
            this.relationFK_ClientBarcodeTypeSpec_ClientBarcodeType = this.Relations["FK_ClientBarcodeTypeSpec_ClientBarcodeType"];
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "PalletLoaderDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PalletLoaderDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableScannedPalletConfirm = new ScannedPalletConfirmDataTable();
            base.Tables.Add(this.tableScannedPalletConfirm);
            this.tableScannedPalletLoad = new ScannedPalletLoadDataTable();
            base.Tables.Add(this.tableScannedPalletLoad);
            this.tablevwPalletLoaderDispatchOpen = new vwPalletLoaderDispatchOpenDataTable();
            base.Tables.Add(this.tablevwPalletLoaderDispatchOpen);
            this.tableMobileUser = new MobileUserDataTable();
            base.Tables.Add(this.tableMobileUser);
            this.tableMobileError = new MobileErrorDataTable();
            base.Tables.Add(this.tableMobileError);
            this.tableClientBarcodeType = new ClientBarcodeTypeDataTable();
            base.Tables.Add(this.tableClientBarcodeType);
            this.tableClientBarcodeTypeSpec = new ClientBarcodeTypeSpecDataTable();
            base.Tables.Add(this.tableClientBarcodeTypeSpec);
            this.relationFK_ScannedPalletLoad_ScannedPalletConfirm = new global::System.Data.DataRelation("FK_ScannedPalletLoad_ScannedPalletConfirm", new global::System.Data.DataColumn[] {
                        this.tableScannedPalletConfirm.ScannedPalletLoadConfirmIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableScannedPalletLoad.ScannedPalletLoadConfirmIDColumn}, false);
            this.Relations.Add(this.relationFK_ScannedPalletLoad_ScannedPalletConfirm);
            this.relationFK_ClientBarcodeTypeSpec_ClientBarcodeType = new global::System.Data.DataRelation("FK_ClientBarcodeTypeSpec_ClientBarcodeType", new global::System.Data.DataColumn[] {
                        this.tableClientBarcodeType.ClientBarcodeTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableClientBarcodeTypeSpec.ClientBarcodeTypeIDColumn}, false);
            this.Relations.Add(this.relationFK_ClientBarcodeTypeSpec_ClientBarcodeType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScannedPalletConfirm()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScannedPalletLoad()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevwPalletLoaderDispatchOpen()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMobileUser()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMobileError()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientBarcodeType()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientBarcodeTypeSpec()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            PalletLoaderDataSet ds = new PalletLoaderDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void ScannedPalletConfirmRowChangeEventHandler(object sender, ScannedPalletConfirmRowChangeEvent e);

        public delegate void ScannedPalletLoadRowChangeEventHandler(object sender, ScannedPalletLoadRowChangeEvent e);

        public delegate void vwPalletLoaderDispatchOpenRowChangeEventHandler(object sender, vwPalletLoaderDispatchOpenRowChangeEvent e);

        public delegate void MobileUserRowChangeEventHandler(object sender, MobileUserRowChangeEvent e);

        public delegate void MobileErrorRowChangeEventHandler(object sender, MobileErrorRowChangeEvent e);

        public delegate void ClientBarcodeTypeRowChangeEventHandler(object sender, ClientBarcodeTypeRowChangeEvent e);

        public delegate void ClientBarcodeTypeSpecRowChangeEventHandler(object sender, ClientBarcodeTypeSpecRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScannedPalletConfirmDataTable : global::System.Data.TypedTableBase<ScannedPalletConfirmRow>
        {

            private global::System.Data.DataColumn columnScannedPalletLoadConfirmID;

            private global::System.Data.DataColumn columnStopNumberID;

            private global::System.Data.DataColumn columnTrailerID;

            private global::System.Data.DataColumn columnTractorID;

            private global::System.Data.DataColumn columnConfirmDatetime;

            private global::System.Data.DataColumn columnTotalPieces;

            private global::System.Data.DataColumn columnTrailerBarcode;

            private global::System.Data.DataColumn columnTrailerNumber;

            private global::System.Data.DataColumn columnMobileUserID;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCreatedDatetime;

            private global::System.Data.DataColumn columnModifiedDatetime;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmDataTable()
            {
                this.TableName = "ScannedPalletConfirm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedPalletConfirmDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannedPalletLoadConfirmIDColumn
            {
                get
                {
                    return this.columnScannedPalletLoadConfirmID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNumberIDColumn
            {
                get
                {
                    return this.columnStopNumberID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerIDColumn
            {
                get
                {
                    return this.columnTrailerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TractorIDColumn
            {
                get
                {
                    return this.columnTractorID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmDatetimeColumn
            {
                get
                {
                    return this.columnConfirmDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPiecesColumn
            {
                get
                {
                    return this.columnTotalPieces;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerBarcodeColumn
            {
                get
                {
                    return this.columnTrailerBarcode;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerNumberColumn
            {
                get
                {
                    return this.columnTrailerNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileUserIDColumn
            {
                get
                {
                    return this.columnMobileUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDatetimeColumn
            {
                get
                {
                    return this.columnCreatedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDatetimeColumn
            {
                get
                {
                    return this.columnModifiedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow this[int index]
            {
                get
                {
                    return ((ScannedPalletConfirmRow)(this.Rows[index]));
                }
            }

            public event ScannedPalletConfirmRowChangeEventHandler ScannedPalletConfirmRowChanging;

            public event ScannedPalletConfirmRowChangeEventHandler ScannedPalletConfirmRowChanged;

            public event ScannedPalletConfirmRowChangeEventHandler ScannedPalletConfirmRowDeleting;

            public event ScannedPalletConfirmRowChangeEventHandler ScannedPalletConfirmRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScannedPalletConfirmRow(ScannedPalletConfirmRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow AddScannedPalletConfirmRow(decimal StopNumberID, decimal TrailerID, decimal TractorID, System.DateTime ConfirmDatetime, decimal TotalPieces, string TrailerBarcode, string TrailerNumber, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
            {
                ScannedPalletConfirmRow rowScannedPalletConfirmRow = ((ScannedPalletConfirmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StopNumberID,
                        TrailerID,
                        TractorID,
                        ConfirmDatetime,
                        TotalPieces,
                        TrailerBarcode,
                        TrailerNumber,
                        MobileUserID,
                        Deleted,
                        CreatedDatetime,
                        ModifiedDatetime};
                rowScannedPalletConfirmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScannedPalletConfirmRow);
                return rowScannedPalletConfirmRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow FindByScannedPalletLoadConfirmID(int ScannedPalletLoadConfirmID)
            {
                return ((ScannedPalletConfirmRow)(this.Rows.Find(new object[] {
                            ScannedPalletLoadConfirmID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ScannedPalletConfirmDataTable cln = ((ScannedPalletConfirmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ScannedPalletConfirmDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnScannedPalletLoadConfirmID = base.Columns["ScannedPalletLoadConfirmID"];
                this.columnStopNumberID = base.Columns["StopNumberID"];
                this.columnTrailerID = base.Columns["TrailerID"];
                this.columnTractorID = base.Columns["TractorID"];
                this.columnConfirmDatetime = base.Columns["ConfirmDatetime"];
                this.columnTotalPieces = base.Columns["TotalPieces"];
                this.columnTrailerBarcode = base.Columns["TrailerBarcode"];
                this.columnTrailerNumber = base.Columns["TrailerNumber"];
                this.columnMobileUserID = base.Columns["MobileUserID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCreatedDatetime = base.Columns["CreatedDatetime"];
                this.columnModifiedDatetime = base.Columns["ModifiedDatetime"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnScannedPalletLoadConfirmID = new global::System.Data.DataColumn("ScannedPalletLoadConfirmID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannedPalletLoadConfirmID);
                this.columnStopNumberID = new global::System.Data.DataColumn("StopNumberID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopNumberID);
                this.columnTrailerID = new global::System.Data.DataColumn("TrailerID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerID);
                this.columnTractorID = new global::System.Data.DataColumn("TractorID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTractorID);
                this.columnConfirmDatetime = new global::System.Data.DataColumn("ConfirmDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmDatetime);
                this.columnTotalPieces = new global::System.Data.DataColumn("TotalPieces", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPieces);
                this.columnTrailerBarcode = new global::System.Data.DataColumn("TrailerBarcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerBarcode);
                this.columnTrailerNumber = new global::System.Data.DataColumn("TrailerNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerNumber);
                this.columnMobileUserID = new global::System.Data.DataColumn("MobileUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileUserID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCreatedDatetime = new global::System.Data.DataColumn("CreatedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDatetime);
                this.columnModifiedDatetime = new global::System.Data.DataColumn("ModifiedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDatetime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnScannedPalletLoadConfirmID}, true));
                this.columnScannedPalletLoadConfirmID.AutoIncrement = true;
                this.columnScannedPalletLoadConfirmID.AutoIncrementSeed = -1;
                this.columnScannedPalletLoadConfirmID.AutoIncrementStep = -1;
                this.columnScannedPalletLoadConfirmID.AllowDBNull = false;
                this.columnScannedPalletLoadConfirmID.ReadOnly = true;
                this.columnScannedPalletLoadConfirmID.Unique = true;
                this.columnStopNumberID.AllowDBNull = false;
                this.columnConfirmDatetime.AllowDBNull = false;
                this.columnTotalPieces.AllowDBNull = false;
                this.columnTrailerBarcode.AllowDBNull = false;
                this.columnTrailerBarcode.MaxLength = 128;
                this.columnTrailerNumber.AllowDBNull = false;
                this.columnTrailerNumber.MaxLength = 32;
                this.columnMobileUserID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCreatedDatetime.AllowDBNull = false;
                this.columnModifiedDatetime.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow NewScannedPalletConfirmRow()
            {
                return ((ScannedPalletConfirmRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ScannedPalletConfirmRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ScannedPalletConfirmRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ScannedPalletConfirmRowChanged != null))
                {
                    this.ScannedPalletConfirmRowChanged(this, new ScannedPalletConfirmRowChangeEvent(((ScannedPalletConfirmRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ScannedPalletConfirmRowChanging != null))
                {
                    this.ScannedPalletConfirmRowChanging(this, new ScannedPalletConfirmRowChangeEvent(((ScannedPalletConfirmRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ScannedPalletConfirmRowDeleted != null))
                {
                    this.ScannedPalletConfirmRowDeleted(this, new ScannedPalletConfirmRowChangeEvent(((ScannedPalletConfirmRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ScannedPalletConfirmRowDeleting != null))
                {
                    this.ScannedPalletConfirmRowDeleting(this, new ScannedPalletConfirmRowChangeEvent(((ScannedPalletConfirmRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScannedPalletConfirmRow(ScannedPalletConfirmRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScannedPalletConfirmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScannedPalletLoadDataTable : global::System.Data.TypedTableBase<ScannedPalletLoadRow>
        {

            private global::System.Data.DataColumn columnScannedPalletLoadID;

            private global::System.Data.DataColumn columnStopNumberID;

            private global::System.Data.DataColumn columnWMSCode;

            private global::System.Data.DataColumn columnStore;

            private global::System.Data.DataColumn columnClientBarcodeType;

            private global::System.Data.DataColumn columnCompanyLocationID;

            private global::System.Data.DataColumn columnPalletCount;

            private global::System.Data.DataColumn columnBarcodeScan;

            private global::System.Data.DataColumn columnScanDatetime;

            private global::System.Data.DataColumn columnScannedPalletLoadConfirmID;

            private global::System.Data.DataColumn columnMobileUserID;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCreatedDatetime;

            private global::System.Data.DataColumn columnModifiedDatetime;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadDataTable()
            {
                this.TableName = "ScannedPalletLoad";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedPalletLoadDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannedPalletLoadIDColumn
            {
                get
                {
                    return this.columnScannedPalletLoadID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNumberIDColumn
            {
                get
                {
                    return this.columnStopNumberID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WMSCodeColumn
            {
                get
                {
                    return this.columnWMSCode;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreColumn
            {
                get
                {
                    return this.columnStore;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientBarcodeTypeColumn
            {
                get
                {
                    return this.columnClientBarcodeType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLocationIDColumn
            {
                get
                {
                    return this.columnCompanyLocationID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PalletCountColumn
            {
                get
                {
                    return this.columnPalletCount;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeScanColumn
            {
                get
                {
                    return this.columnBarcodeScan;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanDatetimeColumn
            {
                get
                {
                    return this.columnScanDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScannedPalletLoadConfirmIDColumn
            {
                get
                {
                    return this.columnScannedPalletLoadConfirmID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileUserIDColumn
            {
                get
                {
                    return this.columnMobileUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDatetimeColumn
            {
                get
                {
                    return this.columnCreatedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDatetimeColumn
            {
                get
                {
                    return this.columnModifiedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow this[int index]
            {
                get
                {
                    return ((ScannedPalletLoadRow)(this.Rows[index]));
                }
            }

            public event ScannedPalletLoadRowChangeEventHandler ScannedPalletLoadRowChanging;

            public event ScannedPalletLoadRowChangeEventHandler ScannedPalletLoadRowChanged;

            public event ScannedPalletLoadRowChangeEventHandler ScannedPalletLoadRowDeleting;

            public event ScannedPalletLoadRowChangeEventHandler ScannedPalletLoadRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScannedPalletLoadRow(ScannedPalletLoadRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow AddScannedPalletLoadRow(decimal StopNumberID, string WMSCode, string Store, int ClientBarcodeType, int CompanyLocationID, decimal PalletCount, string BarcodeScan, System.DateTime ScanDatetime, ScannedPalletConfirmRow parentScannedPalletConfirmRowByFK_ScannedPalletLoad_ScannedPalletConfirm, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
            {
                ScannedPalletLoadRow rowScannedPalletLoadRow = ((ScannedPalletLoadRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StopNumberID,
                        WMSCode,
                        Store,
                        ClientBarcodeType,
                        CompanyLocationID,
                        PalletCount,
                        BarcodeScan,
                        ScanDatetime,
                        null,
                        MobileUserID,
                        Deleted,
                        CreatedDatetime,
                        ModifiedDatetime};
                if ((parentScannedPalletConfirmRowByFK_ScannedPalletLoad_ScannedPalletConfirm != null))
                {
                    columnValuesArray[9] = parentScannedPalletConfirmRowByFK_ScannedPalletLoad_ScannedPalletConfirm[0];
                }
                rowScannedPalletLoadRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScannedPalletLoadRow);
                return rowScannedPalletLoadRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow FindByScannedPalletLoadID(int ScannedPalletLoadID)
            {
                return ((ScannedPalletLoadRow)(this.Rows.Find(new object[] {
                            ScannedPalletLoadID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ScannedPalletLoadDataTable cln = ((ScannedPalletLoadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ScannedPalletLoadDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnScannedPalletLoadID = base.Columns["ScannedPalletLoadID"];
                this.columnStopNumberID = base.Columns["StopNumberID"];
                this.columnWMSCode = base.Columns["WMSCode"];
                this.columnStore = base.Columns["Store"];
                this.columnClientBarcodeType = base.Columns["ClientBarcodeType"];
                this.columnCompanyLocationID = base.Columns["CompanyLocationID"];
                this.columnPalletCount = base.Columns["PalletCount"];
                this.columnBarcodeScan = base.Columns["BarcodeScan"];
                this.columnScanDatetime = base.Columns["ScanDatetime"];
                this.columnScannedPalletLoadConfirmID = base.Columns["ScannedPalletLoadConfirmID"];
                this.columnMobileUserID = base.Columns["MobileUserID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCreatedDatetime = base.Columns["CreatedDatetime"];
                this.columnModifiedDatetime = base.Columns["ModifiedDatetime"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnScannedPalletLoadID = new global::System.Data.DataColumn("ScannedPalletLoadID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannedPalletLoadID);
                this.columnStopNumberID = new global::System.Data.DataColumn("StopNumberID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopNumberID);
                this.columnWMSCode = new global::System.Data.DataColumn("WMSCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWMSCode);
                this.columnStore = new global::System.Data.DataColumn("Store", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStore);
                this.columnClientBarcodeType = new global::System.Data.DataColumn("ClientBarcodeType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientBarcodeType);
                this.columnCompanyLocationID = new global::System.Data.DataColumn("CompanyLocationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLocationID);
                this.columnPalletCount = new global::System.Data.DataColumn("PalletCount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPalletCount);
                this.columnBarcodeScan = new global::System.Data.DataColumn("BarcodeScan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcodeScan);
                this.columnScanDatetime = new global::System.Data.DataColumn("ScanDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanDatetime);
                this.columnScannedPalletLoadConfirmID = new global::System.Data.DataColumn("ScannedPalletLoadConfirmID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScannedPalletLoadConfirmID);
                this.columnMobileUserID = new global::System.Data.DataColumn("MobileUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileUserID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCreatedDatetime = new global::System.Data.DataColumn("CreatedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDatetime);
                this.columnModifiedDatetime = new global::System.Data.DataColumn("ModifiedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDatetime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnScannedPalletLoadID}, true));
                this.columnScannedPalletLoadID.AutoIncrement = true;
                this.columnScannedPalletLoadID.AutoIncrementSeed = -1;
                this.columnScannedPalletLoadID.AutoIncrementStep = -1;
                this.columnScannedPalletLoadID.AllowDBNull = false;
                this.columnScannedPalletLoadID.ReadOnly = true;
                this.columnScannedPalletLoadID.Unique = true;
                this.columnStopNumberID.AllowDBNull = false;
                this.columnWMSCode.AllowDBNull = false;
                this.columnWMSCode.MaxLength = 50;
                this.columnStore.AllowDBNull = false;
                this.columnStore.MaxLength = 32;
                this.columnClientBarcodeType.AllowDBNull = false;
                this.columnPalletCount.AllowDBNull = false;
                this.columnBarcodeScan.AllowDBNull = false;
                this.columnBarcodeScan.MaxLength = 128;
                this.columnScanDatetime.AllowDBNull = false;
                this.columnScannedPalletLoadConfirmID.AllowDBNull = false;
                this.columnMobileUserID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCreatedDatetime.AllowDBNull = false;
                this.columnModifiedDatetime.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow NewScannedPalletLoadRow()
            {
                return ((ScannedPalletLoadRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ScannedPalletLoadRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ScannedPalletLoadRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ScannedPalletLoadRowChanged != null))
                {
                    this.ScannedPalletLoadRowChanged(this, new ScannedPalletLoadRowChangeEvent(((ScannedPalletLoadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ScannedPalletLoadRowChanging != null))
                {
                    this.ScannedPalletLoadRowChanging(this, new ScannedPalletLoadRowChangeEvent(((ScannedPalletLoadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ScannedPalletLoadRowDeleted != null))
                {
                    this.ScannedPalletLoadRowDeleted(this, new ScannedPalletLoadRowChangeEvent(((ScannedPalletLoadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ScannedPalletLoadRowDeleting != null))
                {
                    this.ScannedPalletLoadRowDeleting(this, new ScannedPalletLoadRowChangeEvent(((ScannedPalletLoadRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScannedPalletLoadRow(ScannedPalletLoadRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScannedPalletLoadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vwPalletLoaderDispatchOpenDataTable : global::System.Data.TypedTableBase<vwPalletLoaderDispatchOpenRow>
        {

            private global::System.Data.DataColumn columnRunStopID;

            private global::System.Data.DataColumn columnRunNo;

            private global::System.Data.DataColumn columnRunName;

            private global::System.Data.DataColumn columnTractor_Name;

            private global::System.Data.DataColumn columnTrailer_Name;

            private global::System.Data.DataColumn columnTrailerID;

            private global::System.Data.DataColumn columnConsignee;

            private global::System.Data.DataColumn columnCity;

            private global::System.Data.DataColumn columnState;

            private global::System.Data.DataColumn columnPostalCode;

            private global::System.Data.DataColumn columnPostalCode5;

            private global::System.Data.DataColumn columnTotalOrderPieces;

            private global::System.Data.DataColumn columnTotalOrderWeight;

            private global::System.Data.DataColumn columnShipperNumber;

            private global::System.Data.DataColumn columnShipCode;

            private global::System.Data.DataColumn columnShipper;

            private global::System.Data.DataColumn columnConsCode;

            private global::System.Data.DataColumn columnOrderNotes;

            private global::System.Data.DataColumn columnOrderNumber;

            private global::System.Data.DataColumn columnRunSequence;

            private global::System.Data.DataColumn columnStopSequence;

            private global::System.Data.DataColumn columnRunDate;

            private global::System.Data.DataColumn columnStopNotes;

            private global::System.Data.DataColumn columnRunNotes;

            private global::System.Data.DataColumn columnConsigneeNotes;

            private global::System.Data.DataColumn columnProformaDate;

            private global::System.Data.DataColumn columnStopNumberID;

            private global::System.Data.DataColumn columnRunNumberID;

            private global::System.Data.DataColumn columnTractorID;

            private global::System.Data.DataColumn columnTractorName;

            private global::System.Data.DataColumn columnIsStraightTruck;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenDataTable()
            {
                this.TableName = "vwPalletLoaderDispatchOpen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwPalletLoaderDispatchOpenDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunStopIDColumn
            {
                get
                {
                    return this.columnRunStopID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunNoColumn
            {
                get
                {
                    return this.columnRunNo;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunNameColumn
            {
                get
                {
                    return this.columnRunName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Tractor_NameColumn
            {
                get
                {
                    return this.columnTractor_Name;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Trailer_NameColumn
            {
                get
                {
                    return this.columnTrailer_Name;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrailerIDColumn
            {
                get
                {
                    return this.columnTrailerID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsigneeColumn
            {
                get
                {
                    return this.columnConsignee;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn
            {
                get
                {
                    return this.columnState;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn
            {
                get
                {
                    return this.columnPostalCode;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCode5Column
            {
                get
                {
                    return this.columnPostalCode5;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOrderPiecesColumn
            {
                get
                {
                    return this.columnTotalOrderPieces;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOrderWeightColumn
            {
                get
                {
                    return this.columnTotalOrderWeight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperNumberColumn
            {
                get
                {
                    return this.columnShipperNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipCodeColumn
            {
                get
                {
                    return this.columnShipCode;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperColumn
            {
                get
                {
                    return this.columnShipper;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsCodeColumn
            {
                get
                {
                    return this.columnConsCode;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderNotesColumn
            {
                get
                {
                    return this.columnOrderNotes;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderNumberColumn
            {
                get
                {
                    return this.columnOrderNumber;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunSequenceColumn
            {
                get
                {
                    return this.columnRunSequence;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopSequenceColumn
            {
                get
                {
                    return this.columnStopSequence;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunDateColumn
            {
                get
                {
                    return this.columnRunDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNotesColumn
            {
                get
                {
                    return this.columnStopNotes;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunNotesColumn
            {
                get
                {
                    return this.columnRunNotes;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsigneeNotesColumn
            {
                get
                {
                    return this.columnConsigneeNotes;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProformaDateColumn
            {
                get
                {
                    return this.columnProformaDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNumberIDColumn
            {
                get
                {
                    return this.columnStopNumberID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunNumberIDColumn
            {
                get
                {
                    return this.columnRunNumberID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TractorIDColumn
            {
                get
                {
                    return this.columnTractorID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TractorNameColumn
            {
                get
                {
                    return this.columnTractorName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsStraightTruckColumn
            {
                get
                {
                    return this.columnIsStraightTruck;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenRow this[int index]
            {
                get
                {
                    return ((vwPalletLoaderDispatchOpenRow)(this.Rows[index]));
                }
            }

            public event vwPalletLoaderDispatchOpenRowChangeEventHandler vwPalletLoaderDispatchOpenRowChanging;

            public event vwPalletLoaderDispatchOpenRowChangeEventHandler vwPalletLoaderDispatchOpenRowChanged;

            public event vwPalletLoaderDispatchOpenRowChangeEventHandler vwPalletLoaderDispatchOpenRowDeleting;

            public event vwPalletLoaderDispatchOpenRowChangeEventHandler vwPalletLoaderDispatchOpenRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvwPalletLoaderDispatchOpenRow(vwPalletLoaderDispatchOpenRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenRow AddvwPalletLoaderDispatchOpenRow(
                        decimal RunStopID,
                        string RunNo,
                        string RunName,
                        string Tractor_Name,
                        string Trailer_Name,
                        decimal TrailerID,
                        string Consignee,
                        string City,
                        string State,
                        string PostalCode,
                        string PostalCode5,
                        decimal TotalOrderPieces,
                        decimal TotalOrderWeight,
                        string ShipperNumber,
                        string ShipCode,
                        string Shipper,
                        string ConsCode,
                        string OrderNotes,
                        decimal OrderNumber,
                        decimal RunSequence,
                        decimal StopSequence,
                        int RunDate,
                        string StopNotes,
                        string RunNotes,
                        string ConsigneeNotes,
                        System.DateTime ProformaDate,
                        decimal StopNumberID,
                        decimal RunNumberID,
                        decimal TractorID,
                        string TractorName,
                        bool IsStraightTruck)
            {
                vwPalletLoaderDispatchOpenRow rowvwPalletLoaderDispatchOpenRow = ((vwPalletLoaderDispatchOpenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RunStopID,
                        RunNo,
                        RunName,
                        Tractor_Name,
                        Trailer_Name,
                        TrailerID,
                        Consignee,
                        City,
                        State,
                        PostalCode,
                        PostalCode5,
                        TotalOrderPieces,
                        TotalOrderWeight,
                        ShipperNumber,
                        ShipCode,
                        Shipper,
                        ConsCode,
                        OrderNotes,
                        OrderNumber,
                        RunSequence,
                        StopSequence,
                        RunDate,
                        StopNotes,
                        RunNotes,
                        ConsigneeNotes,
                        ProformaDate,
                        StopNumberID,
                        RunNumberID,
                        TractorID,
                        TractorName,
                        IsStraightTruck};
                rowvwPalletLoaderDispatchOpenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvwPalletLoaderDispatchOpenRow);
                return rowvwPalletLoaderDispatchOpenRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                vwPalletLoaderDispatchOpenDataTable cln = ((vwPalletLoaderDispatchOpenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new vwPalletLoaderDispatchOpenDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnRunStopID = base.Columns["RunStopID"];
                this.columnRunNo = base.Columns["RunNo"];
                this.columnRunName = base.Columns["RunName"];
                this.columnTractor_Name = base.Columns["Tractor_Name"];
                this.columnTrailer_Name = base.Columns["Trailer_Name"];
                this.columnTrailerID = base.Columns["TrailerID"];
                this.columnConsignee = base.Columns["Consignee"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnPostalCode5 = base.Columns["PostalCode5"];
                this.columnTotalOrderPieces = base.Columns["TotalOrderPieces"];
                this.columnTotalOrderWeight = base.Columns["TotalOrderWeight"];
                this.columnShipperNumber = base.Columns["ShipperNumber"];
                this.columnShipCode = base.Columns["ShipCode"];
                this.columnShipper = base.Columns["Shipper"];
                this.columnConsCode = base.Columns["ConsCode"];
                this.columnOrderNotes = base.Columns["OrderNotes"];
                this.columnOrderNumber = base.Columns["OrderNumber"];
                this.columnRunSequence = base.Columns["RunSequence"];
                this.columnStopSequence = base.Columns["StopSequence"];
                this.columnRunDate = base.Columns["RunDate"];
                this.columnStopNotes = base.Columns["StopNotes"];
                this.columnRunNotes = base.Columns["RunNotes"];
                this.columnConsigneeNotes = base.Columns["ConsigneeNotes"];
                this.columnProformaDate = base.Columns["ProformaDate"];
                this.columnStopNumberID = base.Columns["StopNumberID"];
                this.columnRunNumberID = base.Columns["RunNumberID"];
                this.columnTractorID = base.Columns["TractorID"];
                this.columnTractorName = base.Columns["TractorName"];
                this.columnIsStraightTruck = base.Columns["IsStraightTruck"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnRunStopID = new global::System.Data.DataColumn("RunStopID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunStopID);
                this.columnRunNo = new global::System.Data.DataColumn("RunNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunNo);
                this.columnRunName = new global::System.Data.DataColumn("RunName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunName);
                this.columnTractor_Name = new global::System.Data.DataColumn("Tractor_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTractor_Name);
                this.columnTrailer_Name = new global::System.Data.DataColumn("Trailer_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailer_Name);
                this.columnTrailerID = new global::System.Data.DataColumn("TrailerID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrailerID);
                this.columnConsignee = new global::System.Data.DataColumn("Consignee", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignee);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnPostalCode5 = new global::System.Data.DataColumn("PostalCode5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode5);
                this.columnTotalOrderPieces = new global::System.Data.DataColumn("TotalOrderPieces", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOrderPieces);
                this.columnTotalOrderWeight = new global::System.Data.DataColumn("TotalOrderWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOrderWeight);
                this.columnShipperNumber = new global::System.Data.DataColumn("ShipperNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperNumber);
                this.columnShipCode = new global::System.Data.DataColumn("ShipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipCode);
                this.columnShipper = new global::System.Data.DataColumn("Shipper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipper);
                this.columnConsCode = new global::System.Data.DataColumn("ConsCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsCode);
                this.columnOrderNotes = new global::System.Data.DataColumn("OrderNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderNotes);
                this.columnOrderNumber = new global::System.Data.DataColumn("OrderNumber", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderNumber);
                this.columnRunSequence = new global::System.Data.DataColumn("RunSequence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunSequence);
                this.columnStopSequence = new global::System.Data.DataColumn("StopSequence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopSequence);
                this.columnRunDate = new global::System.Data.DataColumn("RunDate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunDate);
                this.columnStopNotes = new global::System.Data.DataColumn("StopNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopNotes);
                this.columnRunNotes = new global::System.Data.DataColumn("RunNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunNotes);
                this.columnConsigneeNotes = new global::System.Data.DataColumn("ConsigneeNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsigneeNotes);
                this.columnProformaDate = new global::System.Data.DataColumn("ProformaDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProformaDate);
                this.columnStopNumberID = new global::System.Data.DataColumn("StopNumberID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopNumberID);
                this.columnRunNumberID = new global::System.Data.DataColumn("RunNumberID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunNumberID);
                this.columnTractorID = new global::System.Data.DataColumn("TractorID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTractorID);
                this.columnTractorName = new global::System.Data.DataColumn("TractorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTractorName);
                this.columnIsStraightTruck = new global::System.Data.DataColumn("IsStraightTruck", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsStraightTruck);
                this.columnRunStopID.ReadOnly = true;
                this.columnRunNo.ReadOnly = true;
                this.columnRunNo.MaxLength = 10;
                this.columnRunName.ReadOnly = true;
                this.columnRunName.MaxLength = 30;
                this.columnTractor_Name.ReadOnly = true;
                this.columnTractor_Name.MaxLength = 50;
                this.columnTrailer_Name.ReadOnly = true;
                this.columnTrailer_Name.MaxLength = 50;
                this.columnTrailerID.ReadOnly = true;
                this.columnConsignee.ReadOnly = true;
                this.columnConsignee.MaxLength = 30;
                this.columnCity.ReadOnly = true;
                this.columnCity.MaxLength = 15;
                this.columnState.ReadOnly = true;
                this.columnState.MaxLength = 2;
                this.columnPostalCode.ReadOnly = true;
                this.columnPostalCode.MaxLength = 10;
                this.columnPostalCode5.ReadOnly = true;
                this.columnPostalCode5.MaxLength = 5;
                this.columnTotalOrderPieces.ReadOnly = true;
                this.columnTotalOrderWeight.ReadOnly = true;
                this.columnShipperNumber.ReadOnly = true;
                this.columnShipperNumber.MaxLength = 20;
                this.columnShipCode.ReadOnly = true;
                this.columnShipCode.MaxLength = 18;
                this.columnShipper.ReadOnly = true;
                this.columnShipper.MaxLength = 30;
                this.columnConsCode.ReadOnly = true;
                this.columnConsCode.MaxLength = 18;
                this.columnOrderNotes.ReadOnly = true;
                this.columnOrderNotes.MaxLength = 100;
                this.columnOrderNumber.ReadOnly = true;
                this.columnRunSequence.ReadOnly = true;
                this.columnStopSequence.ReadOnly = true;
                this.columnRunDate.ReadOnly = true;
                this.columnStopNotes.ReadOnly = true;
                this.columnStopNotes.MaxLength = 200;
                this.columnRunNotes.ReadOnly = true;
                this.columnRunNotes.MaxLength = 800;
                this.columnConsigneeNotes.ReadOnly = true;
                this.columnConsigneeNotes.MaxLength = 2000;
                this.columnProformaDate.ReadOnly = true;
                this.columnStopNumberID.ReadOnly = true;
                this.columnRunNumberID.ReadOnly = true;
                this.columnTractorID.ReadOnly = true;
                this.columnTractorName.ReadOnly = true;
                this.columnTractorName.MaxLength = 50;
                this.columnIsStraightTruck.ReadOnly = true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenRow NewvwPalletLoaderDispatchOpenRow()
            {
                return ((vwPalletLoaderDispatchOpenRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new vwPalletLoaderDispatchOpenRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(vwPalletLoaderDispatchOpenRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.vwPalletLoaderDispatchOpenRowChanged != null))
                {
                    this.vwPalletLoaderDispatchOpenRowChanged(this, new vwPalletLoaderDispatchOpenRowChangeEvent(((vwPalletLoaderDispatchOpenRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.vwPalletLoaderDispatchOpenRowChanging != null))
                {
                    this.vwPalletLoaderDispatchOpenRowChanging(this, new vwPalletLoaderDispatchOpenRowChangeEvent(((vwPalletLoaderDispatchOpenRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.vwPalletLoaderDispatchOpenRowDeleted != null))
                {
                    this.vwPalletLoaderDispatchOpenRowDeleted(this, new vwPalletLoaderDispatchOpenRowChangeEvent(((vwPalletLoaderDispatchOpenRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.vwPalletLoaderDispatchOpenRowDeleting != null))
                {
                    this.vwPalletLoaderDispatchOpenRowDeleting(this, new vwPalletLoaderDispatchOpenRowChangeEvent(((vwPalletLoaderDispatchOpenRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevwPalletLoaderDispatchOpenRow(vwPalletLoaderDispatchOpenRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vwPalletLoaderDispatchOpenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MobileUserDataTable : global::System.Data.TypedTableBase<MobileUserRow>
        {

            private global::System.Data.DataColumn columnMobileUserID;

            private global::System.Data.DataColumn columnLastname;

            private global::System.Data.DataColumn columnFirstname;

            private global::System.Data.DataColumn columnInitials;

            private global::System.Data.DataColumn columnPIN;

            private global::System.Data.DataColumn columnIsActive;

            private global::System.Data.DataColumn columnCreatedDatetime;

            private global::System.Data.DataColumn columnModifiedDatetime;

            private global::System.Data.DataColumn columnDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserDataTable()
            {
                this.TableName = "MobileUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileUserDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileUserIDColumn
            {
                get
                {
                    return this.columnMobileUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastnameColumn
            {
                get
                {
                    return this.columnLastname;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstnameColumn
            {
                get
                {
                    return this.columnFirstname;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialsColumn
            {
                get
                {
                    return this.columnInitials;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PINColumn
            {
                get
                {
                    return this.columnPIN;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn
            {
                get
                {
                    return this.columnIsActive;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDatetimeColumn
            {
                get
                {
                    return this.columnCreatedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDatetimeColumn
            {
                get
                {
                    return this.columnModifiedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRow this[int index]
            {
                get
                {
                    return ((MobileUserRow)(this.Rows[index]));
                }
            }

            public event MobileUserRowChangeEventHandler MobileUserRowChanging;

            public event MobileUserRowChangeEventHandler MobileUserRowChanged;

            public event MobileUserRowChangeEventHandler MobileUserRowDeleting;

            public event MobileUserRowChangeEventHandler MobileUserRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMobileUserRow(MobileUserRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRow AddMobileUserRow(string Lastname, string Firstname, string Initials, string PIN, bool IsActive, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, bool Deleted)
            {
                MobileUserRow rowMobileUserRow = ((MobileUserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Lastname,
                        Firstname,
                        Initials,
                        PIN,
                        IsActive,
                        CreatedDatetime,
                        ModifiedDatetime,
                        Deleted};
                rowMobileUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMobileUserRow);
                return rowMobileUserRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRow FindByMobileUserID(int MobileUserID)
            {
                return ((MobileUserRow)(this.Rows.Find(new object[] {
                            MobileUserID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                MobileUserDataTable cln = ((MobileUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new MobileUserDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnMobileUserID = base.Columns["MobileUserID"];
                this.columnLastname = base.Columns["Lastname"];
                this.columnFirstname = base.Columns["Firstname"];
                this.columnInitials = base.Columns["Initials"];
                this.columnPIN = base.Columns["PIN"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnCreatedDatetime = base.Columns["CreatedDatetime"];
                this.columnModifiedDatetime = base.Columns["ModifiedDatetime"];
                this.columnDeleted = base.Columns["Deleted"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnMobileUserID = new global::System.Data.DataColumn("MobileUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileUserID);
                this.columnLastname = new global::System.Data.DataColumn("Lastname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastname);
                this.columnFirstname = new global::System.Data.DataColumn("Firstname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstname);
                this.columnInitials = new global::System.Data.DataColumn("Initials", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitials);
                this.columnPIN = new global::System.Data.DataColumn("PIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPIN);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnCreatedDatetime = new global::System.Data.DataColumn("CreatedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDatetime);
                this.columnModifiedDatetime = new global::System.Data.DataColumn("ModifiedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDatetime);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMobileUserID}, true));
                this.columnMobileUserID.AutoIncrement = true;
                this.columnMobileUserID.AutoIncrementSeed = -1;
                this.columnMobileUserID.AutoIncrementStep = -1;
                this.columnMobileUserID.AllowDBNull = false;
                this.columnMobileUserID.ReadOnly = true;
                this.columnMobileUserID.Unique = true;
                this.columnLastname.MaxLength = 25;
                this.columnFirstname.MaxLength = 25;
                this.columnInitials.AllowDBNull = false;
                this.columnInitials.MaxLength = 3;
                this.columnPIN.MaxLength = 10;
                this.columnIsActive.AllowDBNull = false;
                this.columnCreatedDatetime.AllowDBNull = false;
                this.columnModifiedDatetime.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRow NewMobileUserRow()
            {
                return ((MobileUserRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new MobileUserRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(MobileUserRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.MobileUserRowChanged != null))
                {
                    this.MobileUserRowChanged(this, new MobileUserRowChangeEvent(((MobileUserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.MobileUserRowChanging != null))
                {
                    this.MobileUserRowChanging(this, new MobileUserRowChangeEvent(((MobileUserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.MobileUserRowDeleted != null))
                {
                    this.MobileUserRowDeleted(this, new MobileUserRowChangeEvent(((MobileUserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.MobileUserRowDeleting != null))
                {
                    this.MobileUserRowDeleting(this, new MobileUserRowChangeEvent(((MobileUserRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMobileUserRow(MobileUserRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MobileUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MobileErrorDataTable : global::System.Data.TypedTableBase<MobileErrorRow>
        {

            private global::System.Data.DataColumn columnErrorDate;

            private global::System.Data.DataColumn columnMessage;

            private global::System.Data.DataColumn columnText;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorDataTable()
            {
                this.TableName = "MobileError";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileErrorDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorDateColumn
            {
                get
                {
                    return this.columnErrorDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn
            {
                get
                {
                    return this.columnMessage;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn
            {
                get
                {
                    return this.columnText;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorRow this[int index]
            {
                get
                {
                    return ((MobileErrorRow)(this.Rows[index]));
                }
            }

            public event MobileErrorRowChangeEventHandler MobileErrorRowChanging;

            public event MobileErrorRowChangeEventHandler MobileErrorRowChanged;

            public event MobileErrorRowChangeEventHandler MobileErrorRowDeleting;

            public event MobileErrorRowChangeEventHandler MobileErrorRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMobileErrorRow(MobileErrorRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorRow AddMobileErrorRow(System.DateTime ErrorDate, string Message, string Text)
            {
                MobileErrorRow rowMobileErrorRow = ((MobileErrorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrorDate,
                        Message,
                        Text};
                rowMobileErrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMobileErrorRow);
                return rowMobileErrorRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                MobileErrorDataTable cln = ((MobileErrorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new MobileErrorDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnErrorDate = base.Columns["ErrorDate"];
                this.columnMessage = base.Columns["Message"];
                this.columnText = base.Columns["Text"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnErrorDate = new global::System.Data.DataColumn("ErrorDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorDate);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.columnMessage.MaxLength = 50;
                this.columnText.MaxLength = 1073741823;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorRow NewMobileErrorRow()
            {
                return ((MobileErrorRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new MobileErrorRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(MobileErrorRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.MobileErrorRowChanged != null))
                {
                    this.MobileErrorRowChanged(this, new MobileErrorRowChangeEvent(((MobileErrorRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.MobileErrorRowChanging != null))
                {
                    this.MobileErrorRowChanging(this, new MobileErrorRowChangeEvent(((MobileErrorRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.MobileErrorRowDeleted != null))
                {
                    this.MobileErrorRowDeleted(this, new MobileErrorRowChangeEvent(((MobileErrorRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.MobileErrorRowDeleting != null))
                {
                    this.MobileErrorRowDeleting(this, new MobileErrorRowChangeEvent(((MobileErrorRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMobileErrorRow(MobileErrorRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MobileErrorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientBarcodeTypeDataTable : global::System.Data.TypedTableBase<ClientBarcodeTypeRow>
        {

            private global::System.Data.DataColumn columnClientBarcodeTypeID;

            private global::System.Data.DataColumn columnClientName;

            private global::System.Data.DataColumn columnPrefix;

            private global::System.Data.DataColumn columnReviewed;

            private global::System.Data.DataColumn columnClientDesc;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCreatedDatetime;

            private global::System.Data.DataColumn columnModifiedDatetime;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeDataTable()
            {
                this.TableName = "ClientBarcodeType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientBarcodeTypeDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientBarcodeTypeIDColumn
            {
                get
                {
                    return this.columnClientBarcodeTypeID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn
            {
                get
                {
                    return this.columnClientName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrefixColumn
            {
                get
                {
                    return this.columnPrefix;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReviewedColumn
            {
                get
                {
                    return this.columnReviewed;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientDescColumn
            {
                get
                {
                    return this.columnClientDesc;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDatetimeColumn
            {
                get
                {
                    return this.columnCreatedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDatetimeColumn
            {
                get
                {
                    return this.columnModifiedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow this[int index]
            {
                get
                {
                    return ((ClientBarcodeTypeRow)(this.Rows[index]));
                }
            }

            public event ClientBarcodeTypeRowChangeEventHandler ClientBarcodeTypeRowChanging;

            public event ClientBarcodeTypeRowChangeEventHandler ClientBarcodeTypeRowChanged;

            public event ClientBarcodeTypeRowChangeEventHandler ClientBarcodeTypeRowDeleting;

            public event ClientBarcodeTypeRowChangeEventHandler ClientBarcodeTypeRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientBarcodeTypeRow(ClientBarcodeTypeRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow AddClientBarcodeTypeRow(string ClientName, string Prefix, bool Reviewed, string ClientDesc, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
            {
                ClientBarcodeTypeRow rowClientBarcodeTypeRow = ((ClientBarcodeTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientName,
                        Prefix,
                        Reviewed,
                        ClientDesc,
                        Deleted,
                        CreatedDatetime,
                        ModifiedDatetime};
                rowClientBarcodeTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientBarcodeTypeRow);
                return rowClientBarcodeTypeRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow FindByClientBarcodeTypeID(int ClientBarcodeTypeID)
            {
                return ((ClientBarcodeTypeRow)(this.Rows.Find(new object[] {
                            ClientBarcodeTypeID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ClientBarcodeTypeDataTable cln = ((ClientBarcodeTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ClientBarcodeTypeDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnClientBarcodeTypeID = base.Columns["ClientBarcodeTypeID"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnPrefix = base.Columns["Prefix"];
                this.columnReviewed = base.Columns["Reviewed"];
                this.columnClientDesc = base.Columns["ClientDesc"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCreatedDatetime = base.Columns["CreatedDatetime"];
                this.columnModifiedDatetime = base.Columns["ModifiedDatetime"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnClientBarcodeTypeID = new global::System.Data.DataColumn("ClientBarcodeTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientBarcodeTypeID);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnPrefix = new global::System.Data.DataColumn("Prefix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrefix);
                this.columnReviewed = new global::System.Data.DataColumn("Reviewed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReviewed);
                this.columnClientDesc = new global::System.Data.DataColumn("ClientDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientDesc);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCreatedDatetime = new global::System.Data.DataColumn("CreatedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDatetime);
                this.columnModifiedDatetime = new global::System.Data.DataColumn("ModifiedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDatetime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClientBarcodeTypeID}, true));
                this.columnClientBarcodeTypeID.AutoIncrement = true;
                this.columnClientBarcodeTypeID.AutoIncrementSeed = -1;
                this.columnClientBarcodeTypeID.AutoIncrementStep = -1;
                this.columnClientBarcodeTypeID.AllowDBNull = false;
                this.columnClientBarcodeTypeID.ReadOnly = true;
                this.columnClientBarcodeTypeID.Unique = true;
                this.columnClientName.AllowDBNull = false;
                this.columnClientName.MaxLength = 50;
                this.columnPrefix.AllowDBNull = false;
                this.columnPrefix.MaxLength = 16;
                this.columnReviewed.AllowDBNull = false;
                this.columnClientDesc.MaxLength = 128;
                this.columnDeleted.AllowDBNull = false;
                this.columnCreatedDatetime.AllowDBNull = false;
                this.columnModifiedDatetime.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow NewClientBarcodeTypeRow()
            {
                return ((ClientBarcodeTypeRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ClientBarcodeTypeRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ClientBarcodeTypeRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ClientBarcodeTypeRowChanged != null))
                {
                    this.ClientBarcodeTypeRowChanged(this, new ClientBarcodeTypeRowChangeEvent(((ClientBarcodeTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ClientBarcodeTypeRowChanging != null))
                {
                    this.ClientBarcodeTypeRowChanging(this, new ClientBarcodeTypeRowChangeEvent(((ClientBarcodeTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ClientBarcodeTypeRowDeleted != null))
                {
                    this.ClientBarcodeTypeRowDeleted(this, new ClientBarcodeTypeRowChangeEvent(((ClientBarcodeTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ClientBarcodeTypeRowDeleting != null))
                {
                    this.ClientBarcodeTypeRowDeleting(this, new ClientBarcodeTypeRowChangeEvent(((ClientBarcodeTypeRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientBarcodeTypeRow(ClientBarcodeTypeRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientBarcodeTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientBarcodeTypeSpecDataTable : global::System.Data.TypedTableBase<ClientBarcodeTypeSpecRow>
        {

            private global::System.Data.DataColumn columnClientBarcodeTypeSpecID;

            private global::System.Data.DataColumn columnClientBarcodeTypeID;

            private global::System.Data.DataColumn columnBarcodeTypeName;

            private global::System.Data.DataColumn columnRequired;

            private global::System.Data.DataColumn columnContainsStore;

            private global::System.Data.DataColumn columnRegexIdentExtract;

            private global::System.Data.DataColumn columnLength;

            private global::System.Data.DataColumn columnndxStore1Start;

            private global::System.Data.DataColumn columnndxStore1End;

            private global::System.Data.DataColumn columnndxStore2Start;

            private global::System.Data.DataColumn columnndxStore2End;

            private global::System.Data.DataColumn columnStoreConcatChar;

            private global::System.Data.DataColumn columnZeroPadLeft;

            private global::System.Data.DataColumn columnZeroPadRight;

            private global::System.Data.DataColumn columnReviewed;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCreatedDatetime;

            private global::System.Data.DataColumn columnModifiedDatetime;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecDataTable()
            {
                this.TableName = "ClientBarcodeTypeSpec";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientBarcodeTypeSpecDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }



            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientBarcodeTypeSpecIDColumn
            {
                get
                {
                    return this.columnClientBarcodeTypeSpecID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientBarcodeTypeIDColumn
            {
                get
                {
                    return this.columnClientBarcodeTypeID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeTypeNameColumn
            {
                get
                {
                    return this.columnBarcodeTypeName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiredColumn
            {
                get
                {
                    return this.columnRequired;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainsStoreColumn
            {
                get
                {
                    return this.columnContainsStore;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegexIdentExtractColumn
            {
                get
                {
                    return this.columnRegexIdentExtract;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn
            {
                get
                {
                    return this.columnLength;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ndxStore1StartColumn
            {
                get
                {
                    return this.columnndxStore1Start;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ndxStore1EndColumn
            {
                get
                {
                    return this.columnndxStore1End;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ndxStore2StartColumn
            {
                get
                {
                    return this.columnndxStore2Start;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ndxStore2EndColumn
            {
                get
                {
                    return this.columnndxStore2End;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreConcatCharColumn
            {
                get
                {
                    return this.columnStoreConcatChar;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZeroPadLeftColumn
            {
                get
                {
                    return this.columnZeroPadLeft;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZeroPadRightColumn
            {
                get
                {
                    return this.columnZeroPadRight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReviewedColumn
            {
                get
                {
                    return this.columnReviewed;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDatetimeColumn
            {
                get
                {
                    return this.columnCreatedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDatetimeColumn
            {
                get
                {
                    return this.columnModifiedDatetime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow this[int index]
            {
                get
                {
                    return ((ClientBarcodeTypeSpecRow)(this.Rows[index]));
                }
            }

            public event ClientBarcodeTypeSpecRowChangeEventHandler ClientBarcodeTypeSpecRowChanging;

            public event ClientBarcodeTypeSpecRowChangeEventHandler ClientBarcodeTypeSpecRowChanged;

            public event ClientBarcodeTypeSpecRowChangeEventHandler ClientBarcodeTypeSpecRowDeleting;

            public event ClientBarcodeTypeSpecRowChangeEventHandler ClientBarcodeTypeSpecRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientBarcodeTypeSpecRow(ClientBarcodeTypeSpecRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow AddClientBarcodeTypeSpecRow(
                        ClientBarcodeTypeRow parentClientBarcodeTypeRowByFK_ClientBarcodeTypeSpec_ClientBarcodeType,
                        string BarcodeTypeName,
                        bool Required,
                        bool ContainsStore,
                        string RegexIdentExtract,
                        int Length,
                        int ndxStore1Start,
                        int ndxStore1End,
                        int ndxStore2Start,
                        int ndxStore2End,
                        string StoreConcatChar,
                        int ZeroPadLeft,
                        int ZeroPadRight,
                        bool Reviewed,
                        bool Deleted,
                        System.DateTime CreatedDatetime,
                        System.DateTime ModifiedDatetime)
            {
                ClientBarcodeTypeSpecRow rowClientBarcodeTypeSpecRow = ((ClientBarcodeTypeSpecRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        BarcodeTypeName,
                        Required,
                        ContainsStore,
                        RegexIdentExtract,
                        Length,
                        ndxStore1Start,
                        ndxStore1End,
                        ndxStore2Start,
                        ndxStore2End,
                        StoreConcatChar,
                        ZeroPadLeft,
                        ZeroPadRight,
                        Reviewed,
                        Deleted,
                        CreatedDatetime,
                        ModifiedDatetime};
                if ((parentClientBarcodeTypeRowByFK_ClientBarcodeTypeSpec_ClientBarcodeType != null))
                {
                    columnValuesArray[1] = parentClientBarcodeTypeRowByFK_ClientBarcodeTypeSpec_ClientBarcodeType[0];
                }
                rowClientBarcodeTypeSpecRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientBarcodeTypeSpecRow);
                return rowClientBarcodeTypeSpecRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow FindByClientBarcodeTypeSpecID(int ClientBarcodeTypeSpecID)
            {
                return ((ClientBarcodeTypeSpecRow)(this.Rows.Find(new object[] {
                            ClientBarcodeTypeSpecID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                ClientBarcodeTypeSpecDataTable cln = ((ClientBarcodeTypeSpecDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new ClientBarcodeTypeSpecDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnClientBarcodeTypeSpecID = base.Columns["ClientBarcodeTypeSpecID"];
                this.columnClientBarcodeTypeID = base.Columns["ClientBarcodeTypeID"];
                this.columnBarcodeTypeName = base.Columns["BarcodeTypeName"];
                this.columnRequired = base.Columns["Required"];
                this.columnContainsStore = base.Columns["ContainsStore"];
                this.columnRegexIdentExtract = base.Columns["RegexIdentExtract"];
                this.columnLength = base.Columns["Length"];
                this.columnndxStore1Start = base.Columns["ndxStore1Start"];
                this.columnndxStore1End = base.Columns["ndxStore1End"];
                this.columnndxStore2Start = base.Columns["ndxStore2Start"];
                this.columnndxStore2End = base.Columns["ndxStore2End"];
                this.columnStoreConcatChar = base.Columns["StoreConcatChar"];
                this.columnZeroPadLeft = base.Columns["ZeroPadLeft"];
                this.columnZeroPadRight = base.Columns["ZeroPadRight"];
                this.columnReviewed = base.Columns["Reviewed"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCreatedDatetime = base.Columns["CreatedDatetime"];
                this.columnModifiedDatetime = base.Columns["ModifiedDatetime"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnClientBarcodeTypeSpecID = new global::System.Data.DataColumn("ClientBarcodeTypeSpecID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientBarcodeTypeSpecID);
                this.columnClientBarcodeTypeID = new global::System.Data.DataColumn("ClientBarcodeTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientBarcodeTypeID);
                this.columnBarcodeTypeName = new global::System.Data.DataColumn("BarcodeTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcodeTypeName);
                this.columnRequired = new global::System.Data.DataColumn("Required", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequired);
                this.columnContainsStore = new global::System.Data.DataColumn("ContainsStore", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainsStore);
                this.columnRegexIdentExtract = new global::System.Data.DataColumn("RegexIdentExtract", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegexIdentExtract);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnndxStore1Start = new global::System.Data.DataColumn("ndxStore1Start", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnndxStore1Start);
                this.columnndxStore1End = new global::System.Data.DataColumn("ndxStore1End", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnndxStore1End);
                this.columnndxStore2Start = new global::System.Data.DataColumn("ndxStore2Start", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnndxStore2Start);
                this.columnndxStore2End = new global::System.Data.DataColumn("ndxStore2End", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnndxStore2End);
                this.columnStoreConcatChar = new global::System.Data.DataColumn("StoreConcatChar", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreConcatChar);
                this.columnZeroPadLeft = new global::System.Data.DataColumn("ZeroPadLeft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZeroPadLeft);
                this.columnZeroPadRight = new global::System.Data.DataColumn("ZeroPadRight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZeroPadRight);
                this.columnReviewed = new global::System.Data.DataColumn("Reviewed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReviewed);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCreatedDatetime = new global::System.Data.DataColumn("CreatedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDatetime);
                this.columnModifiedDatetime = new global::System.Data.DataColumn("ModifiedDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDatetime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClientBarcodeTypeSpecID}, true));
                this.columnClientBarcodeTypeSpecID.AutoIncrement = true;
                this.columnClientBarcodeTypeSpecID.AutoIncrementSeed = -1;
                this.columnClientBarcodeTypeSpecID.AutoIncrementStep = -1;
                this.columnClientBarcodeTypeSpecID.AllowDBNull = false;
                this.columnClientBarcodeTypeSpecID.ReadOnly = true;
                this.columnClientBarcodeTypeSpecID.Unique = true;
                this.columnClientBarcodeTypeID.AllowDBNull = false;
                this.columnBarcodeTypeName.AllowDBNull = false;
                this.columnBarcodeTypeName.MaxLength = 32;
                this.columnRequired.AllowDBNull = false;
                this.columnContainsStore.AllowDBNull = false;
                this.columnRegexIdentExtract.MaxLength = 128;
                this.columnLength.AllowDBNull = false;
                this.columnStoreConcatChar.MaxLength = 1;
                this.columnZeroPadLeft.AllowDBNull = false;
                this.columnZeroPadRight.AllowDBNull = false;
                this.columnReviewed.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCreatedDatetime.AllowDBNull = false;
                this.columnModifiedDatetime.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow NewClientBarcodeTypeSpecRow()
            {
                return ((ClientBarcodeTypeSpecRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new ClientBarcodeTypeSpecRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(ClientBarcodeTypeSpecRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ClientBarcodeTypeSpecRowChanged != null))
                {
                    this.ClientBarcodeTypeSpecRowChanged(this, new ClientBarcodeTypeSpecRowChangeEvent(((ClientBarcodeTypeSpecRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ClientBarcodeTypeSpecRowChanging != null))
                {
                    this.ClientBarcodeTypeSpecRowChanging(this, new ClientBarcodeTypeSpecRowChangeEvent(((ClientBarcodeTypeSpecRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ClientBarcodeTypeSpecRowDeleted != null))
                {
                    this.ClientBarcodeTypeSpecRowDeleted(this, new ClientBarcodeTypeSpecRowChangeEvent(((ClientBarcodeTypeSpecRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ClientBarcodeTypeSpecRowDeleting != null))
                {
                    this.ClientBarcodeTypeSpecRowDeleting(this, new ClientBarcodeTypeSpecRowChangeEvent(((ClientBarcodeTypeSpecRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientBarcodeTypeSpecRow(ClientBarcodeTypeSpecRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PalletLoaderDataSet ds = new PalletLoaderDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientBarcodeTypeSpecDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScannedPalletConfirmRow : global::System.Data.DataRow
        {

            private ScannedPalletConfirmDataTable tableScannedPalletConfirm;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedPalletConfirmRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableScannedPalletConfirm = ((ScannedPalletConfirmDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScannedPalletLoadConfirmID
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletConfirm.ScannedPalletLoadConfirmIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.ScannedPalletLoadConfirmIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopNumberID
            {
                get
                {
                    return ((decimal)(this[this.tableScannedPalletConfirm.StopNumberIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.StopNumberIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TrailerID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableScannedPalletConfirm.TrailerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerID\' in table \'ScannedPalletConfirm\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableScannedPalletConfirm.TrailerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TractorID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableScannedPalletConfirm.TractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TractorID\' in table \'ScannedPalletConfirm\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableScannedPalletConfirm.TractorIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ConfirmDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletConfirm.ConfirmDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.ConfirmDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalPieces
            {
                get
                {
                    return ((decimal)(this[this.tableScannedPalletConfirm.TotalPiecesColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.TotalPiecesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerBarcode
            {
                get
                {
                    return ((string)(this[this.tableScannedPalletConfirm.TrailerBarcodeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.TrailerBarcodeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrailerNumber
            {
                get
                {
                    return ((string)(this[this.tableScannedPalletConfirm.TrailerNumberColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.TrailerNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MobileUserID
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletConfirm.MobileUserIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.MobileUserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableScannedPalletConfirm.DeletedColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletConfirm.CreatedDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.CreatedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletConfirm.ModifiedDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletConfirm.ModifiedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerIDNull()
            {
                return this.IsNull(this.tableScannedPalletConfirm.TrailerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerIDNull()
            {
                this[this.tableScannedPalletConfirm.TrailerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTractorIDNull()
            {
                return this.IsNull(this.tableScannedPalletConfirm.TractorIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTractorIDNull()
            {
                this[this.tableScannedPalletConfirm.TractorIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow[] GetScannedPalletLoadRows()
            {
                if ((this.Table.ChildRelations["FK_ScannedPalletLoad_ScannedPalletConfirm"] == null))
                {
                    return new ScannedPalletLoadRow[0];
                }
                else
                {
                    return ((ScannedPalletLoadRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ScannedPalletLoad_ScannedPalletConfirm"])));
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScannedPalletLoadRow : global::System.Data.DataRow
        {

            private ScannedPalletLoadDataTable tableScannedPalletLoad;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScannedPalletLoadRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableScannedPalletLoad = ((ScannedPalletLoadDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScannedPalletLoadID
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletLoad.ScannedPalletLoadIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.ScannedPalletLoadIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopNumberID
            {
                get
                {
                    return ((decimal)(this[this.tableScannedPalletLoad.StopNumberIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.StopNumberIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WMSCode
            {
                get
                {
                    return ((string)(this[this.tableScannedPalletLoad.WMSCodeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.WMSCodeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Store
            {
                get
                {
                    return ((string)(this[this.tableScannedPalletLoad.StoreColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.StoreColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientBarcodeType
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletLoad.ClientBarcodeTypeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.ClientBarcodeTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CompanyLocationID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableScannedPalletLoad.CompanyLocationIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyLocationID\' in table \'ScannedPalletLoad\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableScannedPalletLoad.CompanyLocationIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PalletCount
            {
                get
                {
                    return ((decimal)(this[this.tableScannedPalletLoad.PalletCountColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.PalletCountColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodeScan
            {
                get
                {
                    return ((string)(this[this.tableScannedPalletLoad.BarcodeScanColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.BarcodeScanColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ScanDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletLoad.ScanDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.ScanDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScannedPalletLoadConfirmID
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletLoad.ScannedPalletLoadConfirmIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.ScannedPalletLoadConfirmIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MobileUserID
            {
                get
                {
                    return ((int)(this[this.tableScannedPalletLoad.MobileUserIDColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.MobileUserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableScannedPalletLoad.DeletedColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletLoad.CreatedDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.CreatedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableScannedPalletLoad.ModifiedDatetimeColumn]));
                }
                set
                {
                    this[this.tableScannedPalletLoad.ModifiedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow ScannedPalletConfirmRow
            {
                get
                {
                    return ((ScannedPalletConfirmRow)(this.GetParentRow(this.Table.ParentRelations["FK_ScannedPalletLoad_ScannedPalletConfirm"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ScannedPalletLoad_ScannedPalletConfirm"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyLocationIDNull()
            {
                return this.IsNull(this.tableScannedPalletLoad.CompanyLocationIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyLocationIDNull()
            {
                this[this.tableScannedPalletLoad.CompanyLocationIDColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vwPalletLoaderDispatchOpenRow : global::System.Data.DataRow
        {

            private vwPalletLoaderDispatchOpenDataTable tablevwPalletLoaderDispatchOpen;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwPalletLoaderDispatchOpenRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tablevwPalletLoaderDispatchOpen = ((vwPalletLoaderDispatchOpenDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RunStopID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.RunStopIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunStopID\' in table \'vwPalletLoaderDispatchOpen\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunStopIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunNo
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.RunNoColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunNo\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunNoColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunName
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.RunNameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunName\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tractor_Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.Tractor_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tractor_Name\' in table \'vwPalletLoaderDispatchOpen\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.Tractor_NameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Trailer_Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.Trailer_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trailer_Name\' in table \'vwPalletLoaderDispatchOpen\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.Trailer_NameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TrailerID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.TrailerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrailerID\' in table \'vwPalletLoaderDispatchOpen\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.TrailerIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Consignee
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ConsigneeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Consignee\' in table \'vwPalletLoaderDispatchOpen\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ConsigneeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.CityColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.StateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'vwPalletLoaderDispatchOpen\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.PostalCodeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.PostalCode5Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode5\' in table \'vwPalletLoaderDispatchOpen\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.PostalCode5Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOrderPieces
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.TotalOrderPiecesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOrderPieces\' in table \'vwPalletLoaderDispatchOpen\' is " +
                                "DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.TotalOrderPiecesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOrderWeight
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.TotalOrderWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOrderWeight\' in table \'vwPalletLoaderDispatchOpen\' is " +
                                "DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.TotalOrderWeightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperNumber
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ShipperNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipperNumber\' in table \'vwPalletLoaderDispatchOpen\' is DBN" +
                                "ull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ShipperNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ShipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShipCode\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ShipCodeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shipper
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ShipperColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shipper\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ShipperColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ConsCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsCode\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ConsCodeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderNotes
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.OrderNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderNotes\' in table \'vwPalletLoaderDispatchOpen\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.OrderNotesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrderNumber
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.OrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderNumber\' in table \'vwPalletLoaderDispatchOpen\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.OrderNumberColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RunSequence
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.RunSequenceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunSequence\' in table \'vwPalletLoaderDispatchOpen\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunSequenceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopSequence
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.StopSequenceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopSequence\' in table \'vwPalletLoaderDispatchOpen\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.StopSequenceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RunDate
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tablevwPalletLoaderDispatchOpen.RunDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunDate\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StopNotes
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.StopNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopNotes\' in table \'vwPalletLoaderDispatchOpen\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.StopNotesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunNotes
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.RunNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunNotes\' in table \'vwPalletLoaderDispatchOpen\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunNotesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsigneeNotes
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.ConsigneeNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsigneeNotes\' in table \'vwPalletLoaderDispatchOpen\' is DB" +
                                "Null.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ConsigneeNotesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProformaDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tablevwPalletLoaderDispatchOpen.ProformaDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProformaDate\' in table \'vwPalletLoaderDispatchOpen\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.ProformaDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal StopNumberID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.StopNumberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopNumberID\' in table \'vwPalletLoaderDispatchOpen\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.StopNumberIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RunNumberID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.RunNumberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunNumberID\' in table \'vwPalletLoaderDispatchOpen\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.RunNumberIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TractorID
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablevwPalletLoaderDispatchOpen.TractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TractorID\' in table \'vwPalletLoaderDispatchOpen\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.TractorIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TractorName
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablevwPalletLoaderDispatchOpen.TractorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TractorName\' in table \'vwPalletLoaderDispatchOpen\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.TractorNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStraightTruck
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tablevwPalletLoaderDispatchOpen.IsStraightTruckColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsStraightTruck\' in table \'vwPalletLoaderDispatchOpen\' is D" +
                                "BNull.", e);
                    }
                }
                set
                {
                    this[this.tablevwPalletLoaderDispatchOpen.IsStraightTruckColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunStopIDNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunStopIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunStopIDNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunStopIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNoNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunNoColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNoNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunNoColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNameNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunNameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNameNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunNameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTractor_NameNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.Tractor_NameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTractor_NameNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.Tractor_NameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailer_NameNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.Trailer_NameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailer_NameNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.Trailer_NameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrailerIDNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.TrailerIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrailerIDNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.TrailerIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsigneeNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ConsigneeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsigneeNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ConsigneeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.CityColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.CityColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.StateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.StateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.PostalCodeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.PostalCodeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCode5Null()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.PostalCode5Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCode5Null()
            {
                this[this.tablevwPalletLoaderDispatchOpen.PostalCode5Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOrderPiecesNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.TotalOrderPiecesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOrderPiecesNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.TotalOrderPiecesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOrderWeightNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.TotalOrderWeightColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOrderWeightNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.TotalOrderWeightColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNumberNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ShipperNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNumberNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ShipperNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipCodeNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ShipCodeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipCodeNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ShipCodeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ShipperColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ShipperColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsCodeNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ConsCodeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsCodeNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ConsCodeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderNotesNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.OrderNotesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderNotesNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.OrderNotesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderNumberNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.OrderNumberColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderNumberNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.OrderNumberColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunSequenceNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunSequenceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunSequenceNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunSequenceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopSequenceNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.StopSequenceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopSequenceNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.StopSequenceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunDateNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunDateNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopNotesNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.StopNotesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopNotesNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.StopNotesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNotesNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunNotesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNotesNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunNotesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsigneeNotesNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ConsigneeNotesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsigneeNotesNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ConsigneeNotesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProformaDateNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.ProformaDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProformaDateNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.ProformaDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopNumberIDNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.StopNumberIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopNumberIDNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.StopNumberIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNumberIDNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.RunNumberIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNumberIDNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.RunNumberIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTractorIDNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.TractorIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTractorIDNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.TractorIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTractorNameNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.TractorNameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTractorNameNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.TractorNameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsStraightTruckNull()
            {
                return this.IsNull(this.tablevwPalletLoaderDispatchOpen.IsStraightTruckColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsStraightTruckNull()
            {
                this[this.tablevwPalletLoaderDispatchOpen.IsStraightTruckColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MobileUserRow : global::System.Data.DataRow
        {

            private MobileUserDataTable tableMobileUser;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileUserRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableMobileUser = ((MobileUserDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MobileUserID
            {
                get
                {
                    return ((int)(this[this.tableMobileUser.MobileUserIDColumn]));
                }
                set
                {
                    this[this.tableMobileUser.MobileUserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lastname
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableMobileUser.LastnameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lastname\' in table \'MobileUser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileUser.LastnameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Firstname
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableMobileUser.FirstnameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Firstname\' in table \'MobileUser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileUser.FirstnameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Initials
            {
                get
                {
                    return ((string)(this[this.tableMobileUser.InitialsColumn]));
                }
                set
                {
                    this[this.tableMobileUser.InitialsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PIN
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableMobileUser.PINColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PIN\' in table \'MobileUser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileUser.PINColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive
            {
                get
                {
                    return ((bool)(this[this.tableMobileUser.IsActiveColumn]));
                }
                set
                {
                    this[this.tableMobileUser.IsActiveColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableMobileUser.CreatedDatetimeColumn]));
                }
                set
                {
                    this[this.tableMobileUser.CreatedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableMobileUser.ModifiedDatetimeColumn]));
                }
                set
                {
                    this[this.tableMobileUser.ModifiedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableMobileUser.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'MobileUser\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileUser.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastnameNull()
            {
                return this.IsNull(this.tableMobileUser.LastnameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastnameNull()
            {
                this[this.tableMobileUser.LastnameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstnameNull()
            {
                return this.IsNull(this.tableMobileUser.FirstnameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstnameNull()
            {
                this[this.tableMobileUser.FirstnameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPINNull()
            {
                return this.IsNull(this.tableMobileUser.PINColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPINNull()
            {
                this[this.tableMobileUser.PINColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull()
            {
                return this.IsNull(this.tableMobileUser.DeletedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull()
            {
                this[this.tableMobileUser.DeletedColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MobileErrorRow : global::System.Data.DataRow
        {

            private MobileErrorDataTable tableMobileError;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MobileErrorRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableMobileError = ((MobileErrorDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ErrorDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableMobileError.ErrorDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorDate\' in table \'MobileError\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileError.ErrorDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableMobileError.MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Message\' in table \'MobileError\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileError.MessageColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableMobileError.TextColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text\' in table \'MobileError\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMobileError.TextColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorDateNull()
            {
                return this.IsNull(this.tableMobileError.ErrorDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorDateNull()
            {
                this[this.tableMobileError.ErrorDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull()
            {
                return this.IsNull(this.tableMobileError.MessageColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull()
            {
                this[this.tableMobileError.MessageColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull()
            {
                return this.IsNull(this.tableMobileError.TextColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull()
            {
                this[this.tableMobileError.TextColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientBarcodeTypeRow : global::System.Data.DataRow
        {

            private ClientBarcodeTypeDataTable tableClientBarcodeType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientBarcodeTypeRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableClientBarcodeType = ((ClientBarcodeTypeDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientBarcodeTypeID
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeType.ClientBarcodeTypeIDColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.ClientBarcodeTypeIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName
            {
                get
                {
                    return ((string)(this[this.tableClientBarcodeType.ClientNameColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.ClientNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Prefix
            {
                get
                {
                    return ((string)(this[this.tableClientBarcodeType.PrefixColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.PrefixColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Reviewed
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeType.ReviewedColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.ReviewedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientDesc
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableClientBarcodeType.ClientDescColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientDesc\' in table \'ClientBarcodeType\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeType.ClientDescColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeType.DeletedColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableClientBarcodeType.CreatedDatetimeColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.CreatedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableClientBarcodeType.ModifiedDatetimeColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeType.ModifiedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientDescNull()
            {
                return this.IsNull(this.tableClientBarcodeType.ClientDescColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientDescNull()
            {
                this[this.tableClientBarcodeType.ClientDescColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow[] GetClientBarcodeTypeSpecRows()
            {
                if ((this.Table.ChildRelations["FK_ClientBarcodeTypeSpec_ClientBarcodeType"] == null))
                {
                    return new ClientBarcodeTypeSpecRow[0];
                }
                else
                {
                    return ((ClientBarcodeTypeSpecRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ClientBarcodeTypeSpec_ClientBarcodeType"])));
                }
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientBarcodeTypeSpecRow : global::System.Data.DataRow
        {

            private ClientBarcodeTypeSpecDataTable tableClientBarcodeTypeSpec;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientBarcodeTypeSpecRow(global::System.Data.DataRowBuilder rb) :
                    base(rb)
            {
                this.tableClientBarcodeTypeSpec = ((ClientBarcodeTypeSpecDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientBarcodeTypeSpecID
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeTypeSpec.ClientBarcodeTypeSpecIDColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ClientBarcodeTypeSpecIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientBarcodeTypeID
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeTypeSpec.ClientBarcodeTypeIDColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ClientBarcodeTypeIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodeTypeName
            {
                get
                {
                    return ((string)(this[this.tableClientBarcodeTypeSpec.BarcodeTypeNameColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.BarcodeTypeNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Required
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeTypeSpec.RequiredColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.RequiredColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ContainsStore
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeTypeSpec.ContainsStoreColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ContainsStoreColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegexIdentExtract
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableClientBarcodeTypeSpec.RegexIdentExtractColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegexIdentExtract\' in table \'ClientBarcodeTypeSpec\' is DBNu" +
                                "ll.", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.RegexIdentExtractColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Length
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeTypeSpec.LengthColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.LengthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndxStore1Start
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableClientBarcodeTypeSpec.ndxStore1StartColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ndxStore1Start\' in table \'ClientBarcodeTypeSpec\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ndxStore1StartColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndxStore1End
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableClientBarcodeTypeSpec.ndxStore1EndColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ndxStore1End\' in table \'ClientBarcodeTypeSpec\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ndxStore1EndColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndxStore2Start
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableClientBarcodeTypeSpec.ndxStore2StartColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ndxStore2Start\' in table \'ClientBarcodeTypeSpec\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ndxStore2StartColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndxStore2End
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableClientBarcodeTypeSpec.ndxStore2EndColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ndxStore2End\' in table \'ClientBarcodeTypeSpec\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ndxStore2EndColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreConcatChar
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableClientBarcodeTypeSpec.StoreConcatCharColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreConcatChar\' in table \'ClientBarcodeTypeSpec\' is DBNull" +
                                ".", e);
                    }
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.StoreConcatCharColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZeroPadLeft
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeTypeSpec.ZeroPadLeftColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ZeroPadLeftColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZeroPadRight
            {
                get
                {
                    return ((int)(this[this.tableClientBarcodeTypeSpec.ZeroPadRightColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ZeroPadRightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Reviewed
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeTypeSpec.ReviewedColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ReviewedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableClientBarcodeTypeSpec.DeletedColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableClientBarcodeTypeSpec.CreatedDatetimeColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.CreatedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDatetime
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableClientBarcodeTypeSpec.ModifiedDatetimeColumn]));
                }
                set
                {
                    this[this.tableClientBarcodeTypeSpec.ModifiedDatetimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow ClientBarcodeTypeRow
            {
                get
                {
                    return ((ClientBarcodeTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_ClientBarcodeTypeSpec_ClientBarcodeType"])));
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ClientBarcodeTypeSpec_ClientBarcodeType"]);
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegexIdentExtractNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.RegexIdentExtractColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegexIdentExtractNull()
            {
                this[this.tableClientBarcodeTypeSpec.RegexIdentExtractColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndxStore1StartNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.ndxStore1StartColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndxStore1StartNull()
            {
                this[this.tableClientBarcodeTypeSpec.ndxStore1StartColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndxStore1EndNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.ndxStore1EndColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndxStore1EndNull()
            {
                this[this.tableClientBarcodeTypeSpec.ndxStore1EndColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndxStore2StartNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.ndxStore2StartColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndxStore2StartNull()
            {
                this[this.tableClientBarcodeTypeSpec.ndxStore2StartColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndxStore2EndNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.ndxStore2EndColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndxStore2EndNull()
            {
                this[this.tableClientBarcodeTypeSpec.ndxStore2EndColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreConcatCharNull()
            {
                return this.IsNull(this.tableClientBarcodeTypeSpec.StoreConcatCharColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreConcatCharNull()
            {
                this[this.tableClientBarcodeTypeSpec.StoreConcatCharColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScannedPalletConfirmRowChangeEvent : global::System.EventArgs
        {

            private ScannedPalletConfirmRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRowChangeEvent(ScannedPalletConfirmRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletConfirmRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScannedPalletLoadRowChangeEvent : global::System.EventArgs
        {

            private ScannedPalletLoadRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRowChangeEvent(ScannedPalletLoadRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScannedPalletLoadRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vwPalletLoaderDispatchOpenRowChangeEvent : global::System.EventArgs
        {

            private vwPalletLoaderDispatchOpenRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenRowChangeEvent(vwPalletLoaderDispatchOpenRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwPalletLoaderDispatchOpenRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MobileUserRowChangeEvent : global::System.EventArgs
        {

            private MobileUserRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRowChangeEvent(MobileUserRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileUserRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MobileErrorRowChangeEvent : global::System.EventArgs
        {

            private MobileErrorRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorRowChangeEvent(MobileErrorRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MobileErrorRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientBarcodeTypeRowChangeEvent : global::System.EventArgs
        {

            private ClientBarcodeTypeRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRowChangeEvent(ClientBarcodeTypeRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientBarcodeTypeSpecRowChangeEvent : global::System.EventArgs
        {

            private ClientBarcodeTypeSpecRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRowChangeEvent(ClientBarcodeTypeSpecRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientBarcodeTypeSpecRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Beitler.Data.PalletLoaderDataSetTableAdapters
{


    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class ScannedPalletConfirmTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannedPalletConfirmTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScannedPalletConfirm";
            tableMapping.ColumnMappings.Add("ScannedPalletLoadConfirmID", "ScannedPalletLoadConfirmID");
            tableMapping.ColumnMappings.Add("StopNumberID", "StopNumberID");
            tableMapping.ColumnMappings.Add("TrailerID", "TrailerID");
            tableMapping.ColumnMappings.Add("TractorID", "TractorID");
            tableMapping.ColumnMappings.Add("ConfirmDatetime", "ConfirmDatetime");
            tableMapping.ColumnMappings.Add("TotalPieces", "TotalPieces");
            tableMapping.ColumnMappings.Add("TrailerBarcode", "TrailerBarcode");
            tableMapping.ColumnMappings.Add("TrailerNumber", "TrailerNumber");
            tableMapping.ColumnMappings.Add("MobileUserID", "MobileUserID");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("CreatedDatetime", "CreatedDatetime");
            tableMapping.ColumnMappings.Add("ModifiedDatetime", "ModifiedDatetime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ScannedPalletConfirm] WHERE (([ScannedPalletLoadConfirmID] = @" +
                "Original_ScannedPalletLoadConfirmID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScannedPalletLoadConfirmID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadConfirmID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ScannedPalletConfirm] ([StopNumberID], [TrailerID], [TractorID], [ConfirmDatetime], [TotalPieces], [TrailerBarcode], [TrailerNumber], [MobileUserID], [Deleted], [CreatedDatetime], [ModifiedDatetime]) VALUES (@StopNumberID, @TrailerID, @TractorID, @ConfirmDatetime, @TotalPieces, @TrailerBarcode, @TrailerNumber, @MobileUserID, @Deleted, @CreatedDatetime, @ModifiedDatetime);
SELECT ScannedPalletLoadConfirmID, StopNumberID, TrailerID, TractorID, ConfirmDatetime, TotalPieces, TrailerBarcode, TrailerNumber, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime FROM ScannedPalletConfirm WHERE (ScannedPalletLoadConfirmID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopNumberID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "StopNumberID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TrailerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TractorID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TractorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConfirmDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConfirmDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalPieces", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalPieces", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerBarcode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrailerBarcode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrailerNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ScannedPalletConfirm] SET [StopNumberID] = @StopNumberID, [TrailerID] = @TrailerID, [TractorID] = @TractorID, [ConfirmDatetime] = @ConfirmDatetime, [TotalPieces] = @TotalPieces, [TrailerBarcode] = @TrailerBarcode, [TrailerNumber] = @TrailerNumber, [MobileUserID] = @MobileUserID, [Deleted] = @Deleted, [CreatedDatetime] = @CreatedDatetime, [ModifiedDatetime] = @ModifiedDatetime WHERE (([ScannedPalletLoadConfirmID] = @Original_ScannedPalletLoadConfirmID));
SELECT ScannedPalletLoadConfirmID, StopNumberID, TrailerID, TractorID, ConfirmDatetime, TotalPieces, TrailerBarcode, TrailerNumber, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime FROM ScannedPalletConfirm WHERE (ScannedPalletLoadConfirmID = @ScannedPalletLoadConfirmID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopNumberID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "StopNumberID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TrailerID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TractorID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TractorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConfirmDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConfirmDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalPieces", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "TotalPieces", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerBarcode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrailerBarcode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TrailerNumber", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TrailerNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScannedPalletLoadConfirmID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadConfirmID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScannedPalletLoadConfirmID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadConfirmID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ScannedPalletLoadConfirmID, StopNumberID, TrailerID, TractorID, ConfirmDat" +
                "etime, TotalPieces, TrailerBarcode, TrailerNumber, MobileUserID, Deleted, Create" +
                "dDatetime, ModifiedDatetime FROM dbo.ScannedPalletConfirm";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.ScannedPalletConfirmDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.ScannedPalletConfirmDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.ScannedPalletConfirmDataTable dataTable = new PalletLoaderDataSet.ScannedPalletConfirmDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.ScannedPalletConfirmDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "ScannedPalletConfirm");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ScannedPalletLoadConfirmID)
        {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ScannedPalletLoadConfirmID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal StopNumberID, global::System.Nullable<decimal> TrailerID, global::System.Nullable<decimal> TractorID, System.DateTime ConfirmDatetime, decimal TotalPieces, string TrailerBarcode, string TrailerNumber, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
        {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(StopNumberID));
            if ((TrailerID.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(TrailerID.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TractorID.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(TractorID.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(ConfirmDatetime));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TotalPieces));
            if ((TrailerBarcode == null))
            {
                throw new global::System.ArgumentNullException("TrailerBarcode");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TrailerBarcode));
            }
            if ((TrailerNumber == null))
            {
                throw new global::System.ArgumentNullException("TrailerNumber");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TrailerNumber));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(MobileUserID));
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(ModifiedDatetime));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal StopNumberID, global::System.Nullable<decimal> TrailerID, global::System.Nullable<decimal> TractorID, System.DateTime ConfirmDatetime, decimal TotalPieces, string TrailerBarcode, string TrailerNumber, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ScannedPalletLoadConfirmID, int ScannedPalletLoadConfirmID)
        {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(StopNumberID));
            if ((TrailerID.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(TrailerID.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TractorID.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(TractorID.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(ConfirmDatetime));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(TotalPieces));
            if ((TrailerBarcode == null))
            {
                throw new global::System.ArgumentNullException("TrailerBarcode");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TrailerBarcode));
            }
            if ((TrailerNumber == null))
            {
                throw new global::System.ArgumentNullException("TrailerNumber");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TrailerNumber));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(MobileUserID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(ModifiedDatetime));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ScannedPalletLoadConfirmID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ScannedPalletLoadConfirmID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal StopNumberID, global::System.Nullable<decimal> TrailerID, global::System.Nullable<decimal> TractorID, System.DateTime ConfirmDatetime, decimal TotalPieces, string TrailerBarcode, string TrailerNumber, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ScannedPalletLoadConfirmID)
        {
            return this.Update(StopNumberID, TrailerID, TractorID, ConfirmDatetime, TotalPieces, TrailerBarcode, TrailerNumber, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime, Original_ScannedPalletLoadConfirmID, Original_ScannedPalletLoadConfirmID);
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class ScannedPalletLoadTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScannedPalletLoadTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScannedPalletLoad";
            tableMapping.ColumnMappings.Add("ScannedPalletLoadID", "ScannedPalletLoadID");
            tableMapping.ColumnMappings.Add("StopNumberID", "StopNumberID");
            tableMapping.ColumnMappings.Add("WMSCode", "WMSCode");
            tableMapping.ColumnMappings.Add("Store", "Store");
            tableMapping.ColumnMappings.Add("ClientBarcodeType", "ClientBarcodeType");
            tableMapping.ColumnMappings.Add("CompanyLocationID", "CompanyLocationID");
            tableMapping.ColumnMappings.Add("PalletCount", "PalletCount");
            tableMapping.ColumnMappings.Add("BarcodeScan", "BarcodeScan");
            tableMapping.ColumnMappings.Add("ScanDatetime", "ScanDatetime");
            tableMapping.ColumnMappings.Add("ScannedPalletLoadConfirmID", "ScannedPalletLoadConfirmID");
            tableMapping.ColumnMappings.Add("MobileUserID", "MobileUserID");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("CreatedDatetime", "CreatedDatetime");
            tableMapping.ColumnMappings.Add("ModifiedDatetime", "ModifiedDatetime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ScannedPalletLoad] WHERE (([ScannedPalletLoadID] = @Original_S" +
                "cannedPalletLoadID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScannedPalletLoadID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ScannedPalletLoad] ([StopNumberID], [WMSCode], [Store], [ClientBarcodeType], [CompanyLocationID], [PalletCount], [BarcodeScan], [ScanDatetime], [ScannedPalletLoadConfirmID], [MobileUserID], [Deleted], [CreatedDatetime], [ModifiedDatetime]) VALUES (@StopNumberID, @WMSCode, @Store, @ClientBarcodeType, @CompanyLocationID, @PalletCount, @BarcodeScan, @ScanDatetime, @ScannedPalletLoadConfirmID, @MobileUserID, @Deleted, @CreatedDatetime, @ModifiedDatetime);
SELECT ScannedPalletLoadID, StopNumberID, WMSCode, Store, ClientBarcodeType, CompanyLocationID, PalletCount, BarcodeScan, ScanDatetime, ScannedPalletLoadConfirmID, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime FROM ScannedPalletLoad WHERE (ScannedPalletLoadID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopNumberID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "StopNumberID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WMSCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WMSCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Store", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Store", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyLocationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyLocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PalletCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "PalletCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarcodeScan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarcodeScan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScanDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScanDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScannedPalletLoadConfirmID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadConfirmID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ScannedPalletLoad] SET [StopNumberID] = @StopNumberID, [WMSCode] = @WMSCode, [Store] = @Store, [ClientBarcodeType] = @ClientBarcodeType, [CompanyLocationID] = @CompanyLocationID, [PalletCount] = @PalletCount, [BarcodeScan] = @BarcodeScan, [ScanDatetime] = @ScanDatetime, [ScannedPalletLoadConfirmID] = @ScannedPalletLoadConfirmID, [MobileUserID] = @MobileUserID, [Deleted] = @Deleted, [CreatedDatetime] = @CreatedDatetime, [ModifiedDatetime] = @ModifiedDatetime WHERE (([ScannedPalletLoadID] = @Original_ScannedPalletLoadID));
SELECT ScannedPalletLoadID, StopNumberID, WMSCode, Store, ClientBarcodeType, CompanyLocationID, PalletCount, BarcodeScan, ScanDatetime, ScannedPalletLoadConfirmID, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime FROM ScannedPalletLoad WHERE (ScannedPalletLoadID = @ScannedPalletLoadID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StopNumberID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "StopNumberID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WMSCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WMSCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Store", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Store", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompanyLocationID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompanyLocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PalletCount", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 6, 2, "PalletCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarcodeScan", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarcodeScan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScanDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScanDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScannedPalletLoadConfirmID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadConfirmID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScannedPalletLoadID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScannedPalletLoadID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ScannedPalletLoadID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ScannedPalletLoadID, StopNumberID, WMSCode, Store, ClientBarcodeType, Comp" +
                "anyLocationID, PalletCount, BarcodeScan, ScanDatetime, ScannedPalletLoadConfirmI" +
                "D, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime FROM dbo.ScannedPall" +
                "etLoad";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.ScannedPalletLoadDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.ScannedPalletLoadDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.ScannedPalletLoadDataTable dataTable = new PalletLoaderDataSet.ScannedPalletLoadDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.ScannedPalletLoadDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "ScannedPalletLoad");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ScannedPalletLoadID)
        {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ScannedPalletLoadID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal StopNumberID, string WMSCode, string Store, int ClientBarcodeType, global::System.Nullable<int> CompanyLocationID, decimal PalletCount, string BarcodeScan, System.DateTime ScanDatetime, int ScannedPalletLoadConfirmID, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
        {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(StopNumberID));
            if ((WMSCode == null))
            {
                throw new global::System.ArgumentNullException("WMSCode");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(WMSCode));
            }
            if ((Store == null))
            {
                throw new global::System.ArgumentNullException("Store");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Store));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ClientBarcodeType));
            if ((CompanyLocationID.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(CompanyLocationID.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(PalletCount));
            if ((BarcodeScan == null))
            {
                throw new global::System.ArgumentNullException("BarcodeScan");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(BarcodeScan));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(ScanDatetime));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ScannedPalletLoadConfirmID));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(MobileUserID));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(ModifiedDatetime));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal StopNumberID, string WMSCode, string Store, int ClientBarcodeType, global::System.Nullable<int> CompanyLocationID, decimal PalletCount, string BarcodeScan, System.DateTime ScanDatetime, int ScannedPalletLoadConfirmID, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ScannedPalletLoadID, int ScannedPalletLoadID)
        {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(StopNumberID));
            if ((WMSCode == null))
            {
                throw new global::System.ArgumentNullException("WMSCode");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(WMSCode));
            }
            if ((Store == null))
            {
                throw new global::System.ArgumentNullException("Store");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Store));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ClientBarcodeType));
            if ((CompanyLocationID.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(CompanyLocationID.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(PalletCount));
            if ((BarcodeScan == null))
            {
                throw new global::System.ArgumentNullException("BarcodeScan");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(BarcodeScan));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(ScanDatetime));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ScannedPalletLoadConfirmID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(MobileUserID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(ModifiedDatetime));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ScannedPalletLoadID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ScannedPalletLoadID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal StopNumberID, string WMSCode, string Store, int ClientBarcodeType, global::System.Nullable<int> CompanyLocationID, decimal PalletCount, string BarcodeScan, System.DateTime ScanDatetime, int ScannedPalletLoadConfirmID, int MobileUserID, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ScannedPalletLoadID)
        {
            return this.Update(StopNumberID, WMSCode, Store, ClientBarcodeType, CompanyLocationID, PalletCount, BarcodeScan, ScanDatetime, ScannedPalletLoadConfirmID, MobileUserID, Deleted, CreatedDatetime, ModifiedDatetime, Original_ScannedPalletLoadID, Original_ScannedPalletLoadID);
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class vwPalletLoaderDispatchOpenTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vwPalletLoaderDispatchOpenTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "vwPalletLoaderDispatchOpen";
            tableMapping.ColumnMappings.Add("RunStopID", "RunStopID");
            tableMapping.ColumnMappings.Add("RunNo", "RunNo");
            tableMapping.ColumnMappings.Add("RunName", "RunName");
            tableMapping.ColumnMappings.Add("Tractor_Name", "Tractor_Name");
            tableMapping.ColumnMappings.Add("Trailer_Name", "Trailer_Name");
            tableMapping.ColumnMappings.Add("TrailerID", "TrailerID");
            tableMapping.ColumnMappings.Add("Consignee", "Consignee");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("PostalCode5", "PostalCode5");
            tableMapping.ColumnMappings.Add("TotalOrderPieces", "TotalOrderPieces");
            tableMapping.ColumnMappings.Add("TotalOrderWeight", "TotalOrderWeight");
            tableMapping.ColumnMappings.Add("ShipperNumber", "ShipperNumber");
            tableMapping.ColumnMappings.Add("ShipCode", "ShipCode");
            tableMapping.ColumnMappings.Add("Shipper", "Shipper");
            tableMapping.ColumnMappings.Add("ConsCode", "ConsCode");
            tableMapping.ColumnMappings.Add("OrderNotes", "OrderNotes");
            tableMapping.ColumnMappings.Add("OrderNumber", "OrderNumber");
            tableMapping.ColumnMappings.Add("RunSequence", "RunSequence");
            tableMapping.ColumnMappings.Add("StopSequence", "StopSequence");
            tableMapping.ColumnMappings.Add("RunDate", "RunDate");
            tableMapping.ColumnMappings.Add("StopNotes", "StopNotes");
            tableMapping.ColumnMappings.Add("RunNotes", "RunNotes");
            tableMapping.ColumnMappings.Add("ConsigneeNotes", "ConsigneeNotes");
            tableMapping.ColumnMappings.Add("ProformaDate", "ProformaDate");
            tableMapping.ColumnMappings.Add("StopNumberID", "StopNumberID");
            tableMapping.ColumnMappings.Add("RunNumberID", "RunNumberID");
            tableMapping.ColumnMappings.Add("TractorID", "TractorID");
            tableMapping.ColumnMappings.Add("TractorName", "TractorName");
            tableMapping.ColumnMappings.Add("IsStraightTruck", "IsStraightTruck");
            this._adapter.TableMappings.Add(tableMapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT RunStopID, RunNo, RunName, Tractor_Name, Trailer_Name, TrailerID, Consignee, City, State, PostalCode, PostalCode5, TotalOrderPieces, TotalOrderWeight, ShipperNumber, ShipCode, Shipper, ConsCode, OrderNotes, OrderNumber, RunSequence, StopSequence, RunDate, StopNotes, RunNotes, ConsigneeNotes, ProformaDate, StopNumberID, RunNumberID, TractorID, TractorName, IsStraightTruck FROM dbo.vwPalletLoaderDispatchOpen";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.vwPalletLoaderDispatchOpenDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.vwPalletLoaderDispatchOpenDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.vwPalletLoaderDispatchOpenDataTable dataTable = new PalletLoaderDataSet.vwPalletLoaderDispatchOpenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class MobileUserTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MobileUserTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MobileUser";
            tableMapping.ColumnMappings.Add("MobileUserID", "MobileUserID");
            tableMapping.ColumnMappings.Add("Lastname", "Lastname");
            tableMapping.ColumnMappings.Add("Firstname", "Firstname");
            tableMapping.ColumnMappings.Add("Initials", "Initials");
            tableMapping.ColumnMappings.Add("PIN", "PIN");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("CreatedDatetime", "CreatedDatetime");
            tableMapping.ColumnMappings.Add("ModifiedDatetime", "ModifiedDatetime");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MobileUser] WHERE (([MobileUserID] = @Original_MobileUserID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MobileUser] ([Lastname], [Firstname], [Initials], [PIN], [IsActive], [CreatedDatetime], [ModifiedDatetime], [Deleted]) VALUES (@Lastname, @Firstname, @Initials, @PIN, @IsActive, @CreatedDatetime, @ModifiedDatetime, @Deleted);
SELECT MobileUserID, Lastname, Firstname, Initials, PIN, IsActive, CreatedDatetime, ModifiedDatetime, Deleted FROM MobileUser WHERE (MobileUserID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lastname", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lastname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Firstname", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Firstname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Initials", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Initials", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MobileUser] SET [Lastname] = @Lastname, [Firstname] = @Firstname, [Initials] = @Initials, [PIN] = @PIN, [IsActive] = @IsActive, [CreatedDatetime] = @CreatedDatetime, [ModifiedDatetime] = @ModifiedDatetime, [Deleted] = @Deleted WHERE (([MobileUserID] = @Original_MobileUserID));
SELECT MobileUserID, Lastname, Firstname, Initials, PIN, IsActive, CreatedDatetime, ModifiedDatetime, Deleted FROM MobileUser WHERE (MobileUserID = @MobileUserID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lastname", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lastname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Firstname", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Firstname", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Initials", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Initials", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsActive", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsActive", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MobileUserID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MobileUserID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MobileUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MobileUserID, Lastname, Firstname, Initials, PIN, IsActive, CreatedDatetim" +
                "e, ModifiedDatetime, Deleted FROM dbo.MobileUser";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.MobileUserDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.MobileUserDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.MobileUserDataTable dataTable = new PalletLoaderDataSet.MobileUserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.MobileUserDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "MobileUser");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MobileUserID)
        {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MobileUserID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Lastname, string Firstname, string Initials, string PIN, bool IsActive, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, global::System.Nullable<bool> Deleted)
        {
            if ((Lastname == null))
            {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Lastname));
            }
            if ((Firstname == null))
            {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Firstname));
            }
            if ((Initials == null))
            {
                throw new global::System.ArgumentNullException("Initials");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Initials));
            }
            if ((PIN == null))
            {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PIN));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(IsActive));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(ModifiedDatetime));
            if ((Deleted.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Deleted.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Lastname, string Firstname, string Initials, string PIN, bool IsActive, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, global::System.Nullable<bool> Deleted, int Original_MobileUserID, int MobileUserID)
        {
            if ((Lastname == null))
            {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Lastname));
            }
            if ((Firstname == null))
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Firstname));
            }
            if ((Initials == null))
            {
                throw new global::System.ArgumentNullException("Initials");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Initials));
            }
            if ((PIN == null))
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PIN));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(ModifiedDatetime));
            if ((Deleted.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Deleted.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_MobileUserID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(MobileUserID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Lastname, string Firstname, string Initials, string PIN, bool IsActive, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, global::System.Nullable<bool> Deleted, int Original_MobileUserID)
        {
            return this.Update(Lastname, Firstname, Initials, PIN, IsActive, CreatedDatetime, ModifiedDatetime, Deleted, Original_MobileUserID, Original_MobileUserID);
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class MobileErrorTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MobileErrorTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MobileError";
            tableMapping.ColumnMappings.Add("ErrorDate", "ErrorDate");
            tableMapping.ColumnMappings.Add("Message", "Message");
            tableMapping.ColumnMappings.Add("Text", "Text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MobileError] ([ErrorDate], [Message], [Text]) VALUES (@ErrorDa" +
                "te, @Message, @Text)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ErrorDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ErrorDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Message", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Message", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Text", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ErrorDate, Message, Text FROM dbo.MobileError";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.MobileErrorDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.MobileErrorDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.MobileErrorDataTable dataTable = new PalletLoaderDataSet.MobileErrorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.MobileErrorDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "MobileError");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<global::System.DateTime> ErrorDate, string Message, string Text)
        {
            if ((ErrorDate.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(ErrorDate.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Message == null))
            {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Message));
            }
            if ((Text == null))
            {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class ClientBarcodeTypeTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientBarcodeTypeTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ClientBarcodeType";
            tableMapping.ColumnMappings.Add("ClientBarcodeTypeID", "ClientBarcodeTypeID");
            tableMapping.ColumnMappings.Add("ClientName", "ClientName");
            tableMapping.ColumnMappings.Add("Prefix", "Prefix");
            tableMapping.ColumnMappings.Add("Reviewed", "Reviewed");
            tableMapping.ColumnMappings.Add("ClientDesc", "ClientDesc");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("CreatedDatetime", "CreatedDatetime");
            tableMapping.ColumnMappings.Add("ModifiedDatetime", "ModifiedDatetime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ClientBarcodeType] WHERE (([ClientBarcodeTypeID] = @Original_C" +
                "lientBarcodeTypeID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientBarcodeTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ClientBarcodeType] ([ClientName], [Prefix], [Reviewed], [ClientDesc], [Deleted], [CreatedDatetime], [ModifiedDatetime]) VALUES (@ClientName, @Prefix, @Reviewed, @ClientDesc, @Deleted, @CreatedDatetime, @ModifiedDatetime);
SELECT ClientBarcodeTypeID, ClientName, Prefix, Reviewed, ClientDesc, Deleted, CreatedDatetime, ModifiedDatetime FROM ClientBarcodeType WHERE (ClientBarcodeTypeID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Prefix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prefix", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reviewed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reviewed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ClientBarcodeType] SET [ClientName] = @ClientName, [Prefix] = @Prefix, [Reviewed] = @Reviewed, [ClientDesc] = @ClientDesc, [Deleted] = @Deleted, [CreatedDatetime] = @CreatedDatetime, [ModifiedDatetime] = @ModifiedDatetime WHERE (([ClientBarcodeTypeID] = @Original_ClientBarcodeTypeID));
SELECT ClientBarcodeTypeID, ClientName, Prefix, Reviewed, ClientDesc, Deleted, CreatedDatetime, ModifiedDatetime FROM ClientBarcodeType WHERE (ClientBarcodeTypeID = @ClientBarcodeTypeID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Prefix", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Prefix", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reviewed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reviewed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientDesc", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientBarcodeTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeTypeID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ClientBarcodeTypeID, ClientName, Prefix, Reviewed, ClientDesc, Deleted, Cr" +
                "eatedDatetime, ModifiedDatetime FROM dbo.ClientBarcodeType";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.ClientBarcodeTypeDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.ClientBarcodeTypeDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.ClientBarcodeTypeDataTable dataTable = new PalletLoaderDataSet.ClientBarcodeTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.ClientBarcodeTypeDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "ClientBarcodeType");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ClientBarcodeTypeID)
        {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ClientBarcodeTypeID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ClientName, string Prefix, bool Reviewed, string ClientDesc, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime)
        {
            if ((ClientName == null))
            {
                throw new global::System.ArgumentNullException("ClientName");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ClientName));
            }
            if ((Prefix == null))
            {
                throw new global::System.ArgumentNullException("Prefix");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Prefix));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Reviewed));
            if ((ClientDesc == null))
            {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ClientDesc));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(ModifiedDatetime));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ClientName, string Prefix, bool Reviewed, string ClientDesc, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ClientBarcodeTypeID, int ClientBarcodeTypeID)
        {
            if ((ClientName == null))
            {
                throw new global::System.ArgumentNullException("ClientName");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ClientName));
            }
            if ((Prefix == null))
            {
                throw new global::System.ArgumentNullException("Prefix");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Prefix));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Reviewed));
            if ((ClientDesc == null))
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ClientDesc));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(ModifiedDatetime));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ClientBarcodeTypeID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ClientBarcodeTypeID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ClientName, string Prefix, bool Reviewed, string ClientDesc, bool Deleted, System.DateTime CreatedDatetime, System.DateTime ModifiedDatetime, int Original_ClientBarcodeTypeID)
        {
            return this.Update(ClientName, Prefix, Reviewed, ClientDesc, Deleted, CreatedDatetime, ModifiedDatetime, Original_ClientBarcodeTypeID, Original_ClientBarcodeTypeID);
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]

    [global::System.ComponentModel.DataObjectAttribute(true)]


    public partial class ClientBarcodeTypeSpecTableAdapter : global::System.ComponentModel.Component
    {

        private global::System.Data.SqlClient.SqlDataAdapter _adapter;

        private global::System.Data.SqlClient.SqlConnection _connection;

        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientBarcodeTypeSpecTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter
        {
            get
            {
                if ((this._adapter == null))
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection
        {
            get
            {
                if ((this._connection == null))
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1))
                {
                    if ((this.CommandCollection[i] != null))
                    {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection
        {
            get
            {
                if ((this._commandCollection == null))
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter()
        {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ClientBarcodeTypeSpec";
            tableMapping.ColumnMappings.Add("ClientBarcodeTypeSpecID", "ClientBarcodeTypeSpecID");
            tableMapping.ColumnMappings.Add("ClientBarcodeTypeID", "ClientBarcodeTypeID");
            tableMapping.ColumnMappings.Add("BarcodeTypeName", "BarcodeTypeName");
            tableMapping.ColumnMappings.Add("Required", "Required");
            tableMapping.ColumnMappings.Add("ContainsStore", "ContainsStore");
            tableMapping.ColumnMappings.Add("RegexIdentExtract", "RegexIdentExtract");
            tableMapping.ColumnMappings.Add("Length", "Length");
            tableMapping.ColumnMappings.Add("ndxStore1Start", "ndxStore1Start");
            tableMapping.ColumnMappings.Add("ndxStore1End", "ndxStore1End");
            tableMapping.ColumnMappings.Add("ndxStore2Start", "ndxStore2Start");
            tableMapping.ColumnMappings.Add("ndxStore2End", "ndxStore2End");
            tableMapping.ColumnMappings.Add("StoreConcatChar", "StoreConcatChar");
            tableMapping.ColumnMappings.Add("ZeroPadLeft", "ZeroPadLeft");
            tableMapping.ColumnMappings.Add("ZeroPadRight", "ZeroPadRight");
            tableMapping.ColumnMappings.Add("Reviewed", "Reviewed");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("CreatedDatetime", "CreatedDatetime");
            tableMapping.ColumnMappings.Add("ModifiedDatetime", "ModifiedDatetime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ClientBarcodeTypeSpec] WHERE (([ClientBarcodeTypeSpecID] = @Or" +
                "iginal_ClientBarcodeTypeSpecID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientBarcodeTypeSpecID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeSpecID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ClientBarcodeTypeSpec] ([ClientBarcodeTypeID], [BarcodeTypeName], [Required], [ContainsStore], [RegexIdentExtract], [Length], [ndxStore1Start], [ndxStore1End], [ndxStore2Start], [ndxStore2End], [StoreConcatChar], [ZeroPadLeft], [ZeroPadRight], [Reviewed], [Deleted], [CreatedDatetime], [ModifiedDatetime]) VALUES (@ClientBarcodeTypeID, @BarcodeTypeName, @Required, @ContainsStore, @RegexIdentExtract, @Length, @ndxStore1Start, @ndxStore1End, @ndxStore2Start, @ndxStore2End, @StoreConcatChar, @ZeroPadLeft, @ZeroPadRight, @Reviewed, @Deleted, @CreatedDatetime, @ModifiedDatetime);
SELECT ClientBarcodeTypeSpecID, ClientBarcodeTypeID, BarcodeTypeName, Required, ContainsStore, RegexIdentExtract, Length, ndxStore1Start, ndxStore1End, ndxStore2Start, ndxStore2End, StoreConcatChar, ZeroPadLeft, ZeroPadRight, Reviewed, Deleted, CreatedDatetime, ModifiedDatetime FROM ClientBarcodeTypeSpec WHERE (ClientBarcodeTypeSpecID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarcodeTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarcodeTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Required", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContainsStore", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainsStore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegexIdentExtract", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegexIdentExtract", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Length", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore1Start", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore1Start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore1End", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore1End", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore2Start", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore2Start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore2End", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore2End", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StoreConcatChar", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StoreConcatChar", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZeroPadLeft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZeroPadLeft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZeroPadRight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZeroPadRight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reviewed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reviewed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ClientBarcodeTypeSpec] SET [ClientBarcodeTypeID] = @ClientBarcodeTypeID, [BarcodeTypeName] = @BarcodeTypeName, [Required] = @Required, [ContainsStore] = @ContainsStore, [RegexIdentExtract] = @RegexIdentExtract, [Length] = @Length, [ndxStore1Start] = @ndxStore1Start, [ndxStore1End] = @ndxStore1End, [ndxStore2Start] = @ndxStore2Start, [ndxStore2End] = @ndxStore2End, [StoreConcatChar] = @StoreConcatChar, [ZeroPadLeft] = @ZeroPadLeft, [ZeroPadRight] = @ZeroPadRight, [Reviewed] = @Reviewed, [Deleted] = @Deleted, [CreatedDatetime] = @CreatedDatetime, [ModifiedDatetime] = @ModifiedDatetime WHERE (([ClientBarcodeTypeSpecID] = @Original_ClientBarcodeTypeSpecID));
SELECT ClientBarcodeTypeSpecID, ClientBarcodeTypeID, BarcodeTypeName, Required, ContainsStore, RegexIdentExtract, Length, ndxStore1Start, ndxStore1End, ndxStore2Start, ndxStore2End, StoreConcatChar, ZeroPadLeft, ZeroPadRight, Reviewed, Deleted, CreatedDatetime, ModifiedDatetime FROM ClientBarcodeTypeSpec WHERE (ClientBarcodeTypeSpecID = @ClientBarcodeTypeSpecID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeTypeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BarcodeTypeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BarcodeTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Required", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Required", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContainsStore", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContainsStore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegexIdentExtract", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegexIdentExtract", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Length", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore1Start", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore1Start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore1End", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore1End", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore2Start", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore2Start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ndxStore2End", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ndxStore2End", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StoreConcatChar", global::System.Data.SqlDbType.Char, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StoreConcatChar", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZeroPadLeft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZeroPadLeft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ZeroPadRight", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ZeroPadRight", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Reviewed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Reviewed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ModifiedDatetime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ModifiedDatetime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientBarcodeTypeSpecID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeSpecID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            //this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientBarcodeTypeSpecID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ClientBarcodeTypeSpecID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection()
        {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "";
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection()
        {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ClientBarcodeTypeSpecID, ClientBarcodeTypeID, BarcodeTypeName, Required, ContainsStore, RegexIdentExtract, Length, ndxStore1Start, ndxStore1End, ndxStore2Start, ndxStore2End, StoreConcatChar, ZeroPadLeft, ZeroPadRight, Reviewed, Deleted, CreatedDatetime, ModifiedDatetime FROM dbo.ClientBarcodeTypeSpec";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PalletLoaderDataSet.ClientBarcodeTypeSpecDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true))
            {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PalletLoaderDataSet.ClientBarcodeTypeSpecDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PalletLoaderDataSet.ClientBarcodeTypeSpecDataTable dataTable = new PalletLoaderDataSet.ClientBarcodeTypeSpecDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet.ClientBarcodeTypeSpecDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(PalletLoaderDataSet dataSet)
        {
            return this.Adapter.Update(dataSet, "ClientBarcodeTypeSpec");
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow dataRow)
        {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        public virtual int Update(global::System.Data.DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ClientBarcodeTypeSpecID)
        {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ClientBarcodeTypeSpecID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int ClientBarcodeTypeID,
                    string BarcodeTypeName,
                    bool Required,
                    bool ContainsStore,
                    string RegexIdentExtract,
                    int Length,
                    global::System.Nullable<int> ndxStore1Start,
                    global::System.Nullable<int> ndxStore1End,
                    global::System.Nullable<int> ndxStore2Start,
                    global::System.Nullable<int> ndxStore2End,
                    string StoreConcatChar,
                    int ZeroPadLeft,
                    int ZeroPadRight,
                    bool Reviewed,
                    bool Deleted,
                    System.DateTime CreatedDatetime,
                    System.DateTime ModifiedDatetime)
        {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ClientBarcodeTypeID));
            if ((BarcodeTypeName == null))
            {
                throw new global::System.ArgumentNullException("BarcodeTypeName");
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BarcodeTypeName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Required));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(ContainsStore));
            if ((RegexIdentExtract == null))
            {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(RegexIdentExtract));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Length));
            if ((ndxStore1Start.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ndxStore1Start.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ndxStore1End.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(ndxStore1End.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ndxStore2Start.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ndxStore2Start.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ndxStore2End.HasValue == true))
            {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ndxStore2End.Value));
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((StoreConcatChar == null))
            {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(StoreConcatChar));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(ZeroPadLeft));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(ZeroPadRight));
            this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(Reviewed));
            this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(ModifiedDatetime));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ClientBarcodeTypeID,
                    string BarcodeTypeName,
                    bool Required,
                    bool ContainsStore,
                    string RegexIdentExtract,
                    int Length,
                    global::System.Nullable<int> ndxStore1Start,
                    global::System.Nullable<int> ndxStore1End,
                    global::System.Nullable<int> ndxStore2Start,
                    global::System.Nullable<int> ndxStore2End,
                    string StoreConcatChar,
                    int ZeroPadLeft,
                    int ZeroPadRight,
                    bool Reviewed,
                    bool Deleted,
                    System.DateTime CreatedDatetime,
                    System.DateTime ModifiedDatetime,
                    int Original_ClientBarcodeTypeSpecID,
                    int ClientBarcodeTypeSpecID)
        {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ClientBarcodeTypeID));
            if ((BarcodeTypeName == null))
            {
                throw new global::System.ArgumentNullException("BarcodeTypeName");
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BarcodeTypeName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Required));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(ContainsStore));
            if ((RegexIdentExtract == null))
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(RegexIdentExtract));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Length));
            if ((ndxStore1Start.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ndxStore1Start.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ndxStore1End.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ndxStore1End.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ndxStore2Start.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ndxStore2Start.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ndxStore2End.HasValue == true))
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ndxStore2End.Value));
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((StoreConcatChar == null))
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(StoreConcatChar));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ZeroPadLeft));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ZeroPadRight));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Reviewed));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(CreatedDatetime));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(ModifiedDatetime));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_ClientBarcodeTypeSpecID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(ClientBarcodeTypeSpecID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open)
                        != global::System.Data.ConnectionState.Open))
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed))
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]

        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ClientBarcodeTypeID,
                    string BarcodeTypeName,
                    bool Required,
                    bool ContainsStore,
                    string RegexIdentExtract,
                    int Length,
                    global::System.Nullable<int> ndxStore1Start,
                    global::System.Nullable<int> ndxStore1End,
                    global::System.Nullable<int> ndxStore2Start,
                    global::System.Nullable<int> ndxStore2End,
                    string StoreConcatChar,
                    int ZeroPadLeft,
                    int ZeroPadRight,
                    bool Reviewed,
                    bool Deleted,
                    System.DateTime CreatedDatetime,
                    System.DateTime ModifiedDatetime,
                    int Original_ClientBarcodeTypeSpecID)
        {
            return this.Update(ClientBarcodeTypeID, BarcodeTypeName, Required, ContainsStore, RegexIdentExtract, Length, ndxStore1Start, ndxStore1End, ndxStore2Start, ndxStore2End, StoreConcatChar, ZeroPadLeft, ZeroPadRight, Reviewed, Deleted, CreatedDatetime, ModifiedDatetime, Original_ClientBarcodeTypeSpecID, Original_ClientBarcodeTypeSpecID);
        }
    }
}
